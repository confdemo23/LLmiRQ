MultiResourceItemReader infinite read/exception loop after a failed delegate.open() when skip policy is very lax
The behaviour of MRIR "resource jumping" relies on the following contract from ItemReader : "Implementations must return null at the end of the input data set".  
The handling code is optimistically based on the packaged Reader and Resource implementations.  After a failed delegate.open() it will throw an exception and the next read call will call delegate.read() expecting a nice "null" to be returned.  When I used a custom Resource, I found it quite easy to end up in a loop such that delegate.open() on a StaxEventItemReader failed leaving it fundamentally uninitialised and throwing exceptions on each read() call. MRIR won&amp;apos;t "jump to the next resource" unless it reads a "null" and therefore the step looped infinitely until we added some skip logic to contain the problem.
I am working on a patch (will attach when ready) to make ResourceAwareItemReaders a bit more pessimistic in their use of "noInput = true".  They erroneously assume resource.exists()=true means there will be no exception thrown in resource.getInputStream()
[
PS. I&amp;apos;m not 100% sold on the open-&gt;exception/loop/read-&gt;null pattern of fallback but have not fully thought through the implications. 
]