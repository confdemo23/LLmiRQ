Handle improper ClassCastException thrown from SDG&apos;s Function Execution interface and annotation-based support when a GemFire Function throws an Exception.
Currently, when a GemFire-defined Function is invoked using Spring Data GemFire&amp;apos;s Function Execution Annotation support and interface-based declarations, and the GemFire Function throws an Exception and the Function has a single value return-type, a ClassCastException is thrown because SDG&amp;apos;s Function infrastructure tries to cast the Exception to the Function Execution interface method return type.
For instance, if I defined a Function Execution interface like so...






@OnServer




public interface ExceptionThrowingFunctionExecution {




	Integer exceptionThrowingFunction();




}






And the exceptionThrowingFunction GemFire Function throws a (Runtime)Exception..






public static class ExceptionThrowingFunction extends FunctionAdapter {




	@Override




	public String getId() {




		return "exceptionThrowingFunction";




	}









	@Override




	public void execute(final FunctionContext context) {




		context.getResultSender().sendException(new IllegalArgumentException("TEST"));




	}




}






Then the following error occurs in SDG&amp;apos;s Function Execution infrastructure...
java.lang.ClassCastException: java.lang.IllegalArgumentException cannot be cast to java.lang.Integer