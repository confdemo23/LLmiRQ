Closing the CachingConnectionFactory at application context close is too abrupt
From version 1.5 and onwards the CachingConnectionFactory will not allow any connections to be created once the application context has been closed. This is implemented by closing the connection factory as soon as closing of the application context is initiated (when the ContextClosedEvent is fired).
This is quite abrupt and causes problems for code that may want to process requests and publish messages while the application context is still in it&amp;apos;s closing stage.
As an example we use spring-integration AMQP components (AmqpInboundChannelAdapter) for consuming inbound messages and these components implement the Spring SmartLifeCycle. This means that message consumers are not stopped until you reach the life-cycle processing stage in the application context closing (which happens after the ContextClosedEvent is fired). This causes problems as you cannot easily prevent incoming messages from arriving but you cannot send any outbound messages (since the connection factory is already closed). 
For us this is major issue since it now limits our possibility to perform a graceful shutdown of our application, which worked well with prior versions.
If closing is really required then I think it could make sense to defer it to a later stage by e.g. implementing Spring SmartLifeCycle and use the stop() method. Combined with a configurable phase that would give us the possibility to co-ordinate the closing with other components that should be stopped before we let the application context start destroying beans.