ClassTypeInformation computes incorrect TypeVariable mappings for recursive generics
When using a class with type variables in the class hierarchy, which contains variables referencing other classes also using common parts of the same class hierarchy, the type variables type mappings for the referenced classes are incorrectly mixed into the original classes type variables.
See the attached JUnit test which can demonstrate the problem.  It may require several runs for it appear, but it is consistently failing for us.
I believe this is due the essentially random ordering of the HashSet.entrySet().iterator() on line 130 and the putAll() on line 136:
https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/util/ClassTypeInformation.java#L130
https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/util/ClassTypeInformation.java#L136
Depending on the sequencing, you either get your own type variable value, or some other related classes.  Last one wins.
We&amp;apos;ve tried modifying this class to removed the putAll (line 136), and it fixes this test, and does not appear to cause problems for 100s of other Spring Data Repository based tests we have.  It&amp;apos;s not clear why the type variable mappings from other classes that are not direct superclasses or interfaces are included at all, it seems very wrong.

It took us 4 days to track down this as the ultimate source of a random startup failures of a Spring Data JPA Repository while parsing of dynamic query methods on a particular part of our domain model.  It was very hard to reproduce, but one developers box seemed to want to fail rather consistently, which gave the opportunity to narrow it down.  My hope, for now, is to work around it by mapping the query method to a custom implementation.