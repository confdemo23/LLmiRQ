Querydsl MongodbSerializer does not take registered converters for Enums into account
MongodbSerializer#visit(Constant&lt;?&gt; expr, Void context)
should check for custom conversions availability to enable typesafe querydsl expressions containing enums. Currently it performs the following:






if (Enum.class.isAssignableFrom(expr.getType())) {




            @SuppressWarnings("unchecked") //Guarded by previous check




            Constant&lt;? extends Enum&lt;?&gt;&gt; expectedExpr = (Constant&lt;? extends Enum&lt;?&gt;&gt;) expr;




            return expectedExpr.getConstant().name();




        } else {




            return expr.getConstant();




        }






Assuming the following model:






class Connection {




  private String id;




  private ConnectionType type;




}









enum ConnectionType {




        A(0),




	B(1),




	C(2);









	private final int value;









        ConnectionType(int value){




		this.value = value;




	}




}






and registered conversions: 






@ReadingConverter




@Component




public class ConnectionTypeReadConverter implements Converter&lt;Integer, ConnectionType&gt; {




    @Override




    public ConnectionType convert(Integer source) {




        return source == null ? null : ConnectionType.getConnectionType((Integer)source);




    }




}









@WritingConverter




@Component




public class ConnectionTypeWriteConverter implements Converter&lt;ConnectionType, Integer&gt; {




    @Override




    public Integer convert(ConnectionType source) {




        return source == null ? null : source.getValue();




    }




}






then the following query generates the enum name (A) instead of value(0) as condition:






ConnectionType type = ConnectionType.A;




QConnection qConnection = QConnection.connection;




Predicate predicate = qConnection.type.eq(type);









connectionRepository.findOne(predicate);}}





