ListOrderedSet.removeAll() is slow
Hi,
I am encountering a performance problem in ListOrderedSet.removeAll().
It appears in version 3.2.1 and also in revision 1344775 (31 May
2012).  I have attached a test that exposes this problem and a
one-line patch that fixes it.  On my machine, for this test, the patch
provides a 317X speedup.
To run the test, just do:
$ java Test
The output for the un-patched version is:
Time is 3812
The output for the patched version is:
Time is 12
As the patch shows, the problem is in 
ListOrderedSet.remove(Object object).  The code for this method is:
boolean result = collection.remove(object);
setOrder.remove(object);
return result;
The patch changes it to :
boolean result = collection.remove(object);
if (result) setOrder.remove(object);
return result;
The "setOrder.remove(object)" is not necessary if 
"collection.remove(object)" did not find the object.
This small change speeds up
ListOrderedSet.ListOrderedSet.removeAll(Collection&lt;?&gt; coll) because
ListOrderedSet.ListOrderedSet.removeAll(Collection&lt;?&gt; coll) iterates
over all the elements in "coll" and calls 
ListOrderedSet.remove(Object object).  So the un-patched code has
quadratic complexity, while the patched code has linear complexity.
Is this truly a bug, or am I missing something here?  If so, can you
please confirm if the patch is correct?
Thanks,
Adrian