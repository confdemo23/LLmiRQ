@Indexed(unique=true, name="foo") puts name&apos;s value to the &apos;key&apos; in the MongoDB 
Here is the example:






@Document




class User {




   @Id




   private String id;




   




   @Indexed(unique=true, name="username_unique_1")




   @Field("username")




   private String user_name;




} 






Spring Data will generate the follwoing index document: 






{ "v" : 1, "key" : { "username_unique_1" : 1 }, "unique" : true, "ns" : "test_db.user", "name" : "username_unique_1", "dropDups" : false, "sparse" : false }






However the expected document is:






{ "v" : 1, "key" : { "username" : 1 }, "unique" : true, "ns" : "test_db.user", "name" : "username_unique_1", "dropDups" : false, "sparse" : false }






I think the expected behavior is: @Indexed.name should correpond to name in the index document, while @Field.value should correpsond to the key in the index document. If @Field is absent, than field name should be used as a key in the index document.
The current implementation confusing: if you put something different from a field name into @Indexed.name, your index will be created on nonexistent field. However this is why we need @Indexed.name - to add a descriptive name to the index.
If someone wants to use @Indexed.name for creating an index on non-existen field (to be honest can&amp;apos;t imagine the case) then low-level API like execute on DBCollection should be used.
The issue is related to the line 165 of MongoPersistentEntityIndexCreator.java where @Inbdexed.name is implicitly used as a name of the field on which index should be created.
P.S. Before submitting this issue I&amp;apos;ve seatched this JIRA for similar defact and found couple of them:

DATAMONGO-70
DATAMONGO-79
DATAMONGO-237

The mentioned issues doesn&amp;apos;t describe the problem in full.
Guys, would you like me to sumbit a patch for that?