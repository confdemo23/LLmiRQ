TypeUtilsTest contains incorrect type assignability assertion due to lost/skipped type variable information during the decision process
TypeUtilsTest originally contained the following under #testIsAssignable():



Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));



For background:



public interface This&lt;K, V&gt; {

}



public class Other&lt;T&gt; implements This&lt;String, T&gt; {

}



public class Thing&lt;Q&gt; extends Other&lt;B&gt; {

}



&lt;B&gt; refers to a type parameter on the TypeUtilsTest class itself.
disType and dingType refer to the generic types of the following fields, respectively:



public This&lt;String, String&gt; dis;

public Thing ding;



Thus the assertion in question declares that type Thing is assignable to This&lt;String, String&gt;.  If we start at This we can see that the implementing class Other maps its T type parameter to the V type parameter of This.  From this point we can proceed down to Thing and see that it maps the B type parameter of the enclosing TypeUtilsTest class to the T type parameter of Other.  Thus it is fairly obvious that only a TypeUtilsTest&lt;String&gt;.Thing is assignable to This&lt;String, String&gt;.  From this we can determine that the intent of the message in the original test assertion must indeed have been to flag an incorrect assertion.  This is the associated bug report.