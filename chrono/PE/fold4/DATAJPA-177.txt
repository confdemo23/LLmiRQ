SimpleJpaRepository.delete(ID id) should validate entity/record existance prior to issue delete command.
If an invalid ID (and ID that does not exists in the DB) is passed to delete(ID id), it fails with:
org.springframework.dao.InvalidDataAccessApiUsageException: attempt to create merge event with null entity; nested exception is java.lang.IllegalArgumentException: attempt to create merge event with null entity.
This is caused because delete(ID id) ends up calling delete(T entity) after retrieving the entity with findOne(id):






SimpleJpaRepository.delete(ID id)






public void delete(ID id) {









    delete(findOne(id));




}






So then, delete(T entity) performs a validation prior to calling em.delete():






SimpleJpaRepository.delete(T entity)






public void delete(T entity) {









    em.remove(em.contains(entity) ? entity : em.merge(entity));




}






Since the entity does not exist, em.contains(entity) returns false and em.merge(entity) is called causing the exception above.
IMO, I believe that this situation should be gracefully handled by the framework. I propose changing the delete(ID id) method to something like:






SimpleJpaRepository.delete(ID id)






public void delete(ID id) {




    T entity = findOne(id);




    if(entity == null){




        throw new InvalidIdException(); // just an example, should throw the exception you think is appropiate




    }









    delete(entity);




}






Just my 2 cents. Keep up the great work!