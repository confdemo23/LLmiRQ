FirewalledRequest.reset() is not called if there are no matching filters
FilterChainProxy.doFilter() determines the list of filters that have to be applied to a request. If there are filters, this method delegates to VirtualFilterChain.doFilter(), which will reset the firewall request wrapper at the end of the chain.
The problem occurs, if there are no filters: FilterChainProxy.doFilter() is creating an instance of FirewalledRequest nevertheless, which it passes on to the original chain. But it does not call the "reset" method this FirewalledRequest object.
This situation occurs, if you map "/" in web.xml to the Spring Security Filter Chain, but the Spring Security Filter Chain only handles "/some/" and "/thing/*". With this mapping, there are URLs like "/status" which are passed to the security chain proxy, but which are not covered by a filter list. The effect is bug is, that the servlet which is mapped to "/status" will get an invalid pathInfo and servletPath.
The resolution should be quite simple: If FilterChainProxy.doFilter() has an empty filter list for a given URL, it must not pass the firewalled request to the original chain but the original request. The line "chain.doFilter(fwRequest, response);" should be changed into "chain.doFilter(servletRequest, response);".
I don&amp;apos;t know if Spring Security 3 is affected too, because we are using 2.0.x.