JdbcCursorItemReader will spin through entire resultset if numberOfProcessRows=0
If a step using jdbccursoritemreader to read fails in the processing-step (itemwriter), number of processed rows (0) will be persisted in ExecutionContext. When re-running the step, 0 will be read as the number of processed rows, and the code will call moveCursorToRow with 0 as param.
The way the private method moveCursorToRow is implemented now, it will always call next() and increment count once, before checking if count==rows. At this point count=1 and row=0, this resultset will be traveresed until next()=false.
Checked the history of the file, and it seems this behavior has been there since before the private method was introduced.
The code below should solve this problem:
	/**

Moves the cursor in the resultset to the position specified by the in param by
traversing the resultset
@param row
	 */
	private void moveCursorToRow(int row){
		try 
Unknown macro: {			for (int skipped = 0; skipped &lt; row &amp;&amp; rs.next(); skipped++) {
				//Do nothing
			}		} 
		catch (SQLException se) 
{
			throw getExceptionTranslator().translate("Attempted to move ResultSet to last committed row", sql, se);
		}
 
	}

