CVE-2012-5055 DaoAuthenticationProvider can reveal which usernames are valid
Description:
Spring Security&amp;apos;s DaoAuthenticationProvider authenticates users by utilizing the PasswordEncoder interface to compare the submitted password with the actual password. If a user is not found, the comparison is skipped which, depending on the PasswordEncoder implementation, can result in a significant difference in the amount of time required to attempt to authenticate an actual user versus a user that does not exist. This opens up the possibility of a side channel attack that would enable a malicious user to determine if a username is valid.
Example:
The DaoAuthenticationProvider allows setting of the PasswordEncoder for password validation:






DaoAuthenticationProvider provider = new DaoAuthenticationProvider();




provider.setPasswordEncoder(new BCryptPasswordEncoder());









// Authentication or failure to authenticate an actual user takes ~84ms




Authentication existingUser = new UsernamePasswordAuthenticationToken("existingUser", "password");




provider.authentication(existingUser);









// Failure to authenticate a user that does not exist takes ~0ms




Authentication missingUser = new UsernamePasswordAuthenticationToken("missingUser", "password");




provider.authentication(missingUser);






The difference between the amount of time it takes to authenticate an existing user and a user that does not exist can reveal if a username is valid or not.
Mitigation:
Applications which use DaoAuthenticationProvider and a PasswordEncoder other than PlainTextEncoder are likely to be vulnerable.
All users may mitigate this issue by upgrading to Spring Security 3.1.3+, 3.0.8+, or 2.0.8+.
Fix:
DaoAuthenticationProvider now performs PasswordEncoder.isPasswordValid when a user is not found.
Credit:
The issue was discovered by Nicholas Goodwin.