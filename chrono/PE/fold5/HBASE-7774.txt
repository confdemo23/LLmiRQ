RegionObserver.prePut() cannot rely on the Put&apos;s timestamps, can even cause data loss
We had a user that had code that looked like this in a coprocessor&amp;apos;s prePut():



if (put.has(expectedKv))

  put.add(kvSayingIFoundIt);

else

  put.add(kvSayingNotFound);



If you have MSLAB turned off, and you have the expectedKv in your Put, doing a Get following your insert will only return kvSayingIFoundIt and not the KV you were actually inserting.
More so, if you only do put.has(expectedKv), you will not get anything back. Your data seems to be gone.
The reason is that in prePut() the timestamp hasn&amp;apos;t been set yet, so calling kv.getTimestamp() during the comparisons in put.has() will populate kv.timestampCache with Long.MAX_VALUE. Then it will stay in the MemStore with that big timestamp and be filtered out because TimeRange will compare Long.MAX_VALUE &gt;= Long.MAX_VALUE and return SKIP.
And the reason it works correctly with MSLAB on is that the KV is cloned in maybeCloneWithAllocator() and the cache is reset.
Now, I think this has bigger implications. Basically, you can&amp;apos;t rely on the timestamp at all in prePut(). I&amp;apos;m sure this can screw someone else in a creative way later.