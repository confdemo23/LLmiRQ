Case insensitive sorting using Pageable
Currently, there is no way to specify in Spring-Data if the sorting is case insensitive or not. It is possible in Hibernate, but since Spring-Data is using springframework classes, clients can&amp;apos;t specify if sorting is case sensitive or not.
Take this example:
I have this method in my Repository 






public interface ItemRepository extends QueryDslPredicateExecutor&lt;Item&gt;{




    @Query("SELECT o FROM Item o WHERE o.status = ?1")




    Page&lt;Item&gt; findByStatus(Item.Status status, Pageable pageable);




}






I want to be able to call that with:






itemRepository.findByStatus(Status.completed, new PageRequest(0, 10, Direction.ASC, "lower(name)")






Note the lower function in the property string. That doesn&amp;apos;t work as Spring-data expects a property there. That will get translated to something like:






SELECT o FROM Item o WHERE o.status = ?1 ORDER BY o.lower(name)






which of course won&amp;apos;t work as there is no &amp;apos;lower&amp;apos; property on the object.
In order to make this work, the Sort interface should have a case sensitive trigger.
Or to make it even more flexible, Sort could accept expressions as &amp;apos;columns&amp;apos;. E.g. accept expressions like:






lower(name)




lower(concat(firstName, ", ", lastName))




etc.






One easy way to do it would be to create a custom implementation of Sort, let&amp;apos;s say ColumnExpressionSort which clients can use to define complex custom columns for sorting. In that case the client is responsible of specifying the full expression.
E.g. in the above case, the user would do:






ColumnExpressionSort sort = new ColumnExpressionSort("lower(o.name)", ASC);




itemRepository.findByStatus(Status.completed, new PageRequest(0, 10, sort);






Given that user does know how the query looks like, they&amp;apos;d know that the returned object is using the o alias. Same for generated queries, they could use the default alias.
I&amp;apos;m happy to work on the changes if the solution makes sense.
Cheers,
Iulian.