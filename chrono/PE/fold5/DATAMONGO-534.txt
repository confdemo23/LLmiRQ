The GridFs query execution does not return sorted resources, when the sorting fields are defined in the query definition
The sorting fields of a Query instance are disregarded during the query execution using an instance of GridFsOperations. The result sets of the found GridFS files are not sorted no matter of the existence of the sorting fields in the preceding query. I expected the resources to be sorted according to the instructions of the corresponding sorting fields.
Example (a dummy one):
Prerequisites:
1. At least 2 files have been stored using GridFs
2. We have certain meta-data fields, which are used as part of the criteria, but we will miss, since they are irrelevant to the example.






@Autowired




private GridFsOperations ops;









Query query = Query.query(Criteria.where(...));




query = query.sort().on("uploadDate", Order.DESCENDING);









final List&lt;GridFSDBFile&gt; files = ops.find(query);






The results in the list, named files, will not be sorted according to the standard GridFsDbFile attribute uploadDate. I believe that the reason lies into the default implementation of the GridFsOperations, more precisely in the class GridFsTemplate. There the method getMappedQuery(Query), which is used for a basic mapping facility from Query to DBObject is implemented like this:






private DBObject getMappedQuery(Query query) {




	return query == null ? null : queryMapper.getMappedObject(query.getQueryObject(), null);




}






I believe that this is the problematic call, since I debugged the DBObject returned from the invocation of the queryMapper.getMappedObject() and it never contained any sorting fields no matter that they were part of if the transformed Query instance. I think that if one goes through the MongoTemplate find-ers implementations, she / he may find the mapping implementation there way better than what is currently available with the GridFs implementation.