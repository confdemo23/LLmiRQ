"CollectionLike" properties are force cast into Collection<?> even though they could be arrays
MappingRedisConverter.writeInternal() does a check against properties. If they are "collection like" then they get cast as Collection&lt;?&gt;. However, isCollectionLike() detects iterables, arrays, and collections, hence this is a faulty assumption for casting.






...




if (persistentProperty.isMap()) {




	writeMap(keyspace, propertyStringPath, persistentProperty.getMapValueType(),




		(Map&lt;?, ?&gt;) accessor.getProperty(persistentProperty), sink);




} else if (persistentProperty.isCollectionLike()) {




	writeCollection(keyspace, propertyStringPath, (Collection&lt;?&gt;) accessor.getProperty(persistentProperty),




			persistentProperty.getTypeInformation().getComponentType(), sink);




} else if (persistentProperty.isEntity()) {




	writeInternal(keyspace, propertyStringPath, accessor.getProperty(persistentProperty),




			persistentProperty.getTypeInformation().getActualType(), sink);




} else {




	Object propertyValue = accessor.getProperty(persistentProperty);




	writeToBucket(propertyStringPath, propertyValue, sink, persistentProperty.getType());




}




...






TypeDiscoverer.isCollectionLike...






	public boolean isCollectionLike() {









		Class&lt;?&gt; rawType = getType();









		if (rawType.isArray() || Iterable.class.equals(rawType)) {




			return true;




		}









		return Collection.class.isAssignableFrom(rawType);




	}





