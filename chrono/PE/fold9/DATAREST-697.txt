ProjectionSerializer doesn&apos;t react to unwrapping mode correctly
Previously, it was possible to have a controller method that returned a Resource-wrapped @Projection interface of a domain type. Somewhere between 2.3.2 and 2.4, this functionality was broken. 
The below code sample works fine in SDR 2.3.2, but in 2.4 and current SNAPSHOTs it results in the following error: 






Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: Can not start an object, expecting field name; nested exception is com.fasterxml.jackson.core.JsonGenerationException: Can not start an object, expecting field name






Testing this out, serializing a Resource-wrapped POJO works fine, a Resource-wrapped domain type works fine, a non-wrapped Projection works fine, but a Resource-wrapped projection fails with the above error. Using the SDR repository controller to return the projection works fine, too.
This feels like a bug? 
Below is sample code for reproducing this. Tested with Spring Boot 1.2.7 and SDR 2.3.2 (working) and Spring Boot 1.3.1.RC1 and SDR 2.4.0.RELEASE (not working).






@SpringBootApplication




public class Sandbox {









    public static void main(String[] args) {




        SpringApplicationBuilder builder = new SpringApplicationBuilder(Sandbox.class);




        builder.run(args);









    }




}












public interface PersonRepository extends CrudRepository&lt;Person,Long&gt; {




}












@Projection(types=Person.class,name="test")




public interface PersonProjection {









    String getName();




}












@Entity




@Getter




@Setter




public class Person {









    @Id




    @GeneratedValue(strategy = GenerationType.IDENTITY)




    private Long id;









    private String name;









    private String phone;









}












@BasePathAwareController




public class TestController {









    private final ProjectionFactory projectionFactory = new SpelAwareProxyProjectionFactory();









    @Autowired




    private PersonRepository personRepository;









    @RequestMapping(value = "/test/{id}", produces = "application/hal+json")




    public ResponseEntity&lt;Resource&lt;PersonProjection&gt;&gt; getProjection(@PathVariable Long id){




        Person one = personRepository.findOne(id);




        PersonProjection projection = projectionFactory.createProjection(PersonProjection.class, one);




        return ResponseEntity.ok(new Resource&lt;&gt;(projection));




    }









    @RequestMapping(value = "/test", produces = "application/hal+json")




    public ResponseEntity&lt;Resources&lt;Resource&lt;PersonProjection&gt;&gt;&gt; getProjections(){




        Set&lt;Person&gt; people = Sets.newHashSet(personRepository.findAll());




        Resources&lt;Resource&lt;PersonProjection&gt;&gt; wrap = Resources.wrap(people.stream().map(o -&gt; projectionFactory.createProjection(PersonProjection.class, o)).collect(Collectors.toSet()));




        return ResponseEntity.ok(wrap);




    }












@WebAppConfiguration




@SpringApplicationConfiguration(classes = Sandbox.class)




@RunWith(SpringJUnit4ClassRunner.class)




public class TestProjection {









    private MockMvc mockMvc;









    @Autowired




    private WebApplicationContext webApplicationContext;




    




    @Autowired




    private PersonRepository personRepository;









    @Before




    public void before(){




        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();




        Person person = new Person();




        person.setName("Adam");




        person.setPhone("123456");




        personRepository.save(person);




        




    }









    @Test 




    public void testProjection() throws Exception {




        mockMvc.perform(get("/test")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath("$._embedded.persons[0].name").value("Adam")).andExpect(jsonPath("$._embedded.persons[0].phone").doesNotExist());




    }









    @Test




    public void testProjectionSingleResource() throws Exception {




        mockMvc.perform(get("/test/1")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath("$.name").value("Adam")).andExpect(jsonPath("$.phone").doesNotExist());




    }









    @Test




    public void testProjectionViaSDR() throws Exception {




        mockMvc.perform(get("/persons?projection=test")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath("$._embedded.persons[0].name").value("Adam")).andExpect(jsonPath("$._embedded.persons[0].phone").doesNotExist());




    }









    @Test




    public void testProjectionViaSDRSingleResource() throws Exception {




        mockMvc.perform(get("/persons/1?projection=test")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath("$.name").value("Adam")).andExpect(jsonPath("$.phone").doesNotExist());




    }














}





