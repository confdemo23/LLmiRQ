Send of message via tx-channel is commited early with (JTA) transaction and TransactionTemplate
When an external JTA/EJB transaction calls a spring bean using TransactionTemplate with JtaTransactionManager, which in turn sends a RabbitMQ-message (using a transacted RabbitTemplate), then the message is committed on the channel when the spring transaction bracket ends (not as expected when the outer JTA transaction is committed).
This only occurs when TransactionTemplate  is used, but not with AOP transaction proxies (@Transactional). Everything works as expected with AOP proxies.
The reason seems to be, that the ConnectionFactoryUtils use TransactionAspectSupport.currentTransactionStatus().isNewTransaction() (line 177) to check for the presence of a new/nested transaction - unfortunately it seems TransactionAspectSupport can only be used with AOP based transaction handling. When used with TransactionTemplate, TransactionAspectSupport.currentTransactionStatus() throws a NoTransactionException causing the Utils to assume a local transaction.
Workaround for users: Use AOP based transaction handling.
See AMQP-479 for the history (solved the main issue, but left the problem in the special case of TransactionTemplate s being used)