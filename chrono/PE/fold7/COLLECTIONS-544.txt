Undocumented performance issue in the retainAll method in CollectionUtils 
The method retainAll in CollectionUtils is inefficient when the parameter collection has a slow containment method.
The following is the current implementation with its documentation:

 /**
     * Returns a collection containing all the elements in &lt;code&gt;collection&lt;/code&gt;
     * that are also in &lt;code&gt;retain&lt;/code&gt;. The cardinality of an element &lt;code&gt;e&lt;/code&gt;
     * in the returned collection is the same as the cardinality of &lt;code&gt;e&lt;/code&gt;
     * in &lt;code&gt;collection&lt;/code&gt; unless &lt;code&gt;retain&lt;/code&gt; does not contain &lt;code&gt;e&lt;/code&gt;, in which
     * case the cardinality is zero. This method is useful if you do not wish to modify
     * the collection &lt;code&gt;c&lt;/code&gt; and thus cannot call &lt;code&gt;c.retainAll(retain);&lt;/code&gt;.
     *
     * @param &lt;C&gt;  the type of object the {@link Collection} contains
     * @param collection  the collection whose contents are the target of the #retailAll operation
     * @param retain  the collection containing the elements to be retained in the returned collection
     * @return a &lt;code&gt;Collection&lt;/code&gt; containing all the elements of &lt;code&gt;collection&lt;/code&gt;
     * that occur at least once in &lt;code&gt;retain&lt;/code&gt;.
     * @throws NullPointerException if either parameter is null
     * @since 3.2
     */
    public static &lt;C&gt; Collection&lt;C&gt; retainAll(final Collection&lt;C&gt; collection, final Collection&lt;?&gt; retain) {
        return ListUtils.retainAll(collection, retain);
    }


We can notice the inefficiency by looking at the retainAll method in ListUtils.
The retainAll method from ListUtils is implemented and documented as follows:

  /**
     * Returns a List containing all the elements in &lt;code&gt;collection&lt;/code&gt;
     * that are also in &lt;code&gt;retain&lt;/code&gt;. The cardinality of an element &lt;code&gt;e&lt;/code&gt;
     * in the returned list is the same as the cardinality of &lt;code&gt;e&lt;/code&gt;
     * in &lt;code&gt;collection&lt;/code&gt; unless &lt;code&gt;retain&lt;/code&gt; does not contain &lt;code&gt;e&lt;/code&gt;, in which
     * case the cardinality is zero. This method is useful if you do not wish to modify
     * the collection &lt;code&gt;c&lt;/code&gt; and thus cannot call &lt;code&gt;collection.retainAll(retain);&lt;/code&gt;.
     * &lt;p&gt;
     * This implementation iterates over &lt;code&gt;collection&lt;/code&gt;, checking each element in
     * turn to see if it&amp;apos;s contained in &lt;code&gt;retain&lt;/code&gt;. If it&amp;apos;s contained, it&amp;apos;s added
     * to the returned list. As a consequence, it is advised to use a collection type for
     * &lt;code&gt;retain&lt;/code&gt; that provides a fast (e.g. O(1)) implementation of
     * {@link Collection#contains(Object)}.
     *
     * @param &lt;E&gt;  the element type
     * @param collection  the collection whose contents are the target of the #retailAll operation
     * @param retain  the collection containing the elements to be retained in the returned collection
     * @return a &lt;code&gt;List&lt;/code&gt; containing all the elements of &lt;code&gt;c&lt;/code&gt;
     * that occur at least once in &lt;code&gt;retain&lt;/code&gt;.
     * @throws NullPointerException if either parameter is null
     * @since 3.2
     */
    public static &lt;E&gt; List&lt;E&gt; retainAll(final Collection&lt;E&gt; collection, final Collection&lt;?&gt; retain) {
        final List&lt;E&gt; list = new ArrayList&lt;E&gt;(Math.min(collection.size(), retain.size()));

        for (final E obj : collection) {
            if (retain.contains(obj)) {
                list.add(obj);
            }
        }
        return list;
    }


In the case of ListUtils#retainAll, the inefficiency is properly documented.
Perhaps the disclaimer about potential inefficiencies depending on the type 
of the parameter collection in ListUtils:retainAll should also be included in CollectionUtils#retainAll.