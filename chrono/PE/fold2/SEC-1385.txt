AbstractRetryEntryPoint should use DefaultRedirectStrategy for redirects to support proxies
The AbstractRetryEntryPoint builds the redirect url for the redirect itself in its commence method. The problem is, that the context-path is always used.
If you run your application through a proxy with a change of the path, than the redirects leeds to a wrong url.
Example:
The app is deployed on Tomcat as ajp://localhost:8009/app1 and is accessed via a apache proxy through http://yourdomain.com/. The redirect url of a secured resource /resource.html will be http://yourdomain.com/app1/resource.html instead of the correct one http://yourdomain.com/resource.html.
Other parts of Spring Security are using the DefaultRedirectStrategy, which works as expected when setting the contextRelative to true.
I think if the AbstractRetryEntryPoint uses the same convention (DefaultRedirectStrategy), then the problem with the http-&gt;https redirect in DefaultRedirectStrategy (see comment on the class) will also be fixed.
As a workaround we implemented our own RetryWithHttpsEntryPoint, which processes the contextRelative flag, and it works. But this is heavily to configure, because you cannot use the namespace configuration any more.
https://fisheye.springsource.org/browse/spring-security/web/src/main/java/org/springframework/security/web/access/channel/AbstractRetryEntryPoint.java