GenericFileConsumer fails to pick up all files in a directory if there are more files than maxMessagePerPoll setting
Camel adds filenames it is processing to an in memory, in progress map.  Once it is finished processing it removes them.  If we specific a maxMessagesPerPoll number less then the files in a directory, it only processes up to the number of files we specify for each poll.  It then removes the rest from the in progress map and tries them again next poll.  This is the code (from GenericFileConsumer:processBatch()) for the last part:
       for (int index = 0; index &lt; exchanges.size() &amp;&amp; isRunAllowed(); index++) 
{
            GenericFileExchange&lt;T&gt; exchange = (GenericFileExchange&lt;T&gt;) exchanges.poll();
            String key = exchange.getGenericFile().getFileName();
            endpoint.getInProgressRepository().remove(key);
        }

Unfortunately, as you can see it uses exchanges.size() to determine how many file names to remove (i.e. how many times to loop), however exchanges.poll() removes one from the head of exchanges for each loop.  This means that the exchanges.size() reduces by one for each loop, which means it only cleans up half of the filenames that are in exchanges, which means these files are never picked up again as Camel thinks it is still processing them.

The fix is to replace the for loop with a while:

        while ((exchanges.size() &gt; 0) &amp;&amp; isRunAllowed()) {            GenericFileExchange&lt;T&gt; exchange = (GenericFileExchange&lt;T&gt;) exchanges.poll();            String key = exchange.getGenericFile().getFileName();            endpoint.getInProgressRepository().remove(key);        }

