Modify the GemfireDataSourcePostProcessor (basis for <gfe:datasource>) to not assume a GemFire Server was configured and bootstrapped with Spring and subsequently that the SDG ListRegionsOnServerFunction was registered.
When a developer starts a non-Spring configured and bootstrapped GemFire Server (e.g. with Gfsh) and subsequently connects to the Server with a Spring configured and bootstrapped GemFire Cache client (ClientCache) using the &lt;gfe-data:datasource&gt; element in the SDG XML "data" namespace, the following Exception will occur...






java.lang.reflect.InvocationTargetException




  ...




Caused by: com.gemstone.gemfire.cache.client.ServerOperationException:  : While performing a remote execute     Functionorg.springframework.data.gemfire.support.ListRegionsOnServerFunction




  at com.gemstone.gemfire.cache.client.internal.ExecuteFunctionOp$ExecuteFuncti onOpImpl.processResponse(ExecuteFunctionOp.java:623)




  at com.gemstone.gemfire.cache.client.internal.AbstractOp.processResponse(AbstractOp.java:218) 




  at com.gemstone.gemfire.cache.client.internal.AbstractOp.attemptReadResponse( AbstractOp.java:153)




  at com.gemstone.gemfire.cache.client.internal.AbstractOp.attempt(AbstractOp.java:372)




  at com.gemstone.gemfire.cache.client.internal.ConnectionImpl.execute(ConnectionImpl.java:267)




  at com.gemstone.gemfire.cache.client.internal.pooling.PooledConnection.execute(PooledConnection.java:320)




  at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.executeWithPossibleReAuthentication(OpExecutorImpl.java:942)




  at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.executeOnServer(OpExecutorImpl.java:375)




  at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.executeOn(OpExecutorImpl.java:339)




  at com.gemstone.gemfire.cache.client.internal.PoolImpl.executeOn(PoolImpl.java:732)




  at com.gemstone.gemfire.cache.client.internal.SingleHopOperationCallable.call(SingleHopOperationCallable.java:46)




  at java.util.concurrent.FutureTask.run(FutureTask.java:262)




  at  java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java: 1145)




  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)




  ... 1 more




Caused by: java.lang.ClassNotFoundException:   org.springframework.data.gemfire.support.ListRegionsOnServerFunction




  at java.net.URLClassLoader$1.run(URLClassLoader.java:372)




  at java.net.URLClassLoader$1.run(URLClassLoader.java:361)




  at java.security.AccessController.doPrivileged(Native Method)




  at java.net.URLClassLoader.findClass(URLClassLoader.java:360)




  at java.lang.ClassLoader.loadClass(ClassLoader.java:424)




  at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)




  at java.lang.ClassLoader.loadClass(ClassLoader.java:357)




  at java.lang.Class.forName0(Native Method)




  at java.lang.Class.forName(Class.java:340)




  at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:626)




  at com.gemstone.gemfire.internal.InternalDataSerializer$DSObjectInputStream.resolveClass(InternalDataSerializer.java:3563)




  at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1613)




  at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1518)




  at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1774)




  at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351)




  at java.io.ObjectInputStream.readObject(ObjectInputStream.java:371)




  at com.gemstone.gemfire.internal.InternalDataSerializer.basicReadObject(InternalDataSerializer.java:2966)




  at com.gemstone.gemfire.DataSerializer.readObject(DataSerializer.java:3210)




  at com.gemstone.gemfire.internal.util.BlobHelper.deserializeBlob(BlobHelper.java:110)




  at com.gemstone.gemfire.internal.util.BlobHelper.deserializeBlob(BlobHelper.java:77)




  at com.gemstone.gemfire.internal.cache.tier.sockets.CacheServerHelper.deserialize(CacheServerHelper.java:55)




  at com.gemstone.gemfire.internal.cache.tier.sockets.Part.getObject(Part.java:233)




  at com.gemstone.gemfire.internal.cache.tier.sockets.Part.getObject(Part.java:238)




  at com.gemstone.gemfire.internal.cache.tier.sockets.Part.getStringOrObject(Part.java:243)




  at com.gemstone.gemfire.internal.cache.tier.sockets.command.ExecuteFunction66.cmdExecute(ExecuteFunction66.java:124)




  at com.gemstone.gemfire.internal.cache.tier.sockets.command.ExecuteFunction70.cmdExecute(ExecuteFunction70.java:51)




  at com.gemstone.gemfire.internal.cache.tier.sockets.BaseCommand.execute(BaseCommand.java:182)




  at com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection.doNormalMsg(ServerConnection.java:789)




  at com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection.doOneMessage(ServerConnection.java:920)




  at com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection.run(ServerConnection.java:1165)




  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)




  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)




  at com.gemstone.gemfire.internal.cache.tier.sockets.AcceptorImpl$1$1.run(AcceptorImpl.java:577)




  ... 1 more






This Exception occurs because the ListRegionsOnServerFunction is a Spring Data GemFire provided Function and will only be registered with the GemFire Server if and when the GemFire Server is configured and bootstrapped with Spring.
I have packaged the ListRegionsOnServerFunction class in a separate JAR file (listRegionsOnServerFunction.jar) and attached it to this bug for convenience.
To workaround this issue, a developer can add the listRegionsOnServerFunction.jar file to the GemFire Server&amp;apos;s CLASSPATH on start...






gfsh&gt;start server --name=X ... --classpath=/absolute/path/to/listRegionsOnServerFunction.jar






Or use Gfsh&amp;apos;s &amp;apos;deploy&amp;apos; command to deploy the listRegionsOnServerFunction.jar to any/all running GemFire Servers in the cluster, for instance...






gfsh&gt;deploy --jar=/absolute/path/to/listRegionsOnServerFunction.jar






More details about Gfsh&amp;apos;s &amp;apos;deploy&amp;apos; command can be found here.