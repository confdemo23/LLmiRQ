@Query in extending interface is not picked up correctly
I try to define an interface method in a super repository interface and &amp;apos;implement&amp;apos; this in an extending interface with @Query. This does not work.
Tested in the latest nightly build:






@NoRepositoryBean




public interface EntityRepository&lt;T&gt; extends JpaRepository&lt;T, Long&gt; {









	T findByDealer(Dealer dealer);




}









public interface CarRepository extends EntityRepository&lt;PersonalSiteVehicle&gt; {









	@Override




	@Query("select p from PersonalSiteVehicle p join p.detail d join d.enrichable e where e.dealer = ?1")




	PersonalSiteVehicle findByDealer(Dealer dealer);




}






Results in 






Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;apos;carRepository&amp;apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: Could not create query metamodel for method public abstract java.lang.Object nl.inmotiv.indi.repository.EntityRepository.findByDealer(nl.inmotiv.indi.domain.Dealer)!




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:149)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:102)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1442)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:848)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707)




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478)




	... 32 more




Caused by: java.lang.IllegalArgumentException: Could not create query metamodel for method public abstract java.lang.Object nl.inmotiv.indi.repository.EntityRepository.findByDealer(nl.inmotiv.indi.domain.Dealer)!




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:164)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:71)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.&lt;init&gt;(RepositoryFactorySupport.java:269)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:142)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:114)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:38)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)




	... 40 more




Caused by: java.lang.IllegalArgumentException: No property dealer found for type class nl.inmotiv.indi.domain.PersonalSiteVehicle




	at org.springframework.data.mapping.PropertyPath.&lt;init&gt;(PropertyPath.java:73)




	at org.springframework.data.mapping.PropertyPath.&lt;init&gt;(PropertyPath.java:92)




	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:319)




	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:301)




	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:265)




	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:239)




	at org.springframework.data.repository.query.parser.Part.&lt;init&gt;(Part.java:70)




	at org.springframework.data.repository.query.parser.PartTree$OrPart.&lt;init&gt;(PartTree.java:180)




	at org.springframework.data.repository.query.parser.PartTree$Predicate.buildTree(PartTree.java:260)




	at org.springframework.data.repository.query.parser.PartTree$Predicate.&lt;init&gt;(PartTree.java:240)




	at org.springframework.data.repository.query.parser.PartTree.&lt;init&gt;(PartTree.java:71)




	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.&lt;init&gt;(PartTreeJpaQuery.java:57)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:93)






It looks like Spring Data does not use the @Query annotation in the sub interface. 