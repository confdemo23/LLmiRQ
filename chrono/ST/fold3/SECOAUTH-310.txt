URL encoding issue in doing a FQL query
Hi,
Using v1.0.0.M5 of oauth2 library, I am trying to do a FQL (Facebook Query Language) based request, which looks like this:






String fql = "SELECT uid2 FROM friend WHERE uid1=me()"









oauth2RestTemplate.getForObject("https://graph.facebook.com/fql?q={q}", ObjectNode, [q: fql])






Doing it throws the following exception:






java.lang.IllegalArgumentException: Could not parse URI




    org.springframework.security.oauth2.client.http.OAuth2ClientHttpRequestFactory.appendQueryParameter(OAuth2ClientHttpRequestFactory.java:111)




    org.springframework.security.oauth2.client.http.OAuth2ClientHttpRequestFactory.createRequest(OAuth2ClientHttpRequestFactory.java:66)




    org.springframework.http.client.support.HttpAccessor.createRequest(HttpAccessor.java:76)




    org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:434)




    org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401)




    org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:199)




    ....






I tried to debug a little, and it&amp;apos;s related to this piece of code






protected URI appendQueryParameter(URI uri, OAuth2AccessToken accessToken) {




    ....




    String query = uri.getQuery();




    ....




    URI update = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null);




    // now add the encoded query string and the then fragment




    StringBuffer sb = new StringBuffer(update.toString());




    sb.append("?");




    sb.append(query);




    ....




    return new URI(sb.toString());




    ....




}






The uri.getQuery() returns the decoded query part. In the FQL query I do above, the URI that comes into this method has it properly encoded, but this method decodes it by doing uri.getQuery() and then append the access token to it. So finally it tries to make a URI that has FQL string that is not URL encoded, and hence the exception.
I guess it should have used URI.getRawQuery(), which returns the query portion, as is (non-decoded).
I see that the latest codebase has this portion completely revamped, as I couldn&amp;apos;t find this buggy class in the latest codebase. Even if it is not possible to provide a fix for 1.0.0.M5, request you to check if such scenarios are currently handled appropriately.