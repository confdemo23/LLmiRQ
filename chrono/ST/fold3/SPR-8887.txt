QuartzJobBean throws IncompatibleClassChangeError when using Quartz 2.x
This is the exception we get when using the latest Spring 3.1 RC2 together with Quartz 2.1.1
[ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-1] - Job DEFAULT.deviceIndexerJob threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
[ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-2] - Job DEFAULT.shortCodeIndexerJob threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
The source for QuartzJobBean does not seem to indicate any kind of problem. Even though JobExecutionContext was a class in Quartz 1.x and is now an interface in Quartz 2.x, the methods invoked on it are present in both.
The problem is that the Spring binary has been compiled against Quartz 1.x, and changing a class into an interface (or viceversa) is an incompatible change according to the Java spec, so we get IncompatibleClassChangeError even if the source compiles fine against both Quartz versions.
Recompiling QuartzJobBean against Quartz 2.x solves the issue, however this is an undesirable solution. I guess the solution would be to invoke the offending methods using reflection.
Our workaround was simply creating an alternative MethodInvokingJobDetailFactoryBean simplified for our use and compiled directly against Quartz 2.x, but this should be solved for the general public.
BTW, SPR-8435 is somehow related but is clearly a different issue, which in fact has already been solved in 3.1 RC2