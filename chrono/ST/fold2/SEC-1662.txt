NPE when when defining two <http> elements during registerFilterChainProxy
I am defining two &lt;http&gt; elements which apparently is permitted in Spring Security 3.1.0M2 per documentation
    &lt;http auto-config="false" entry-point-ref="http403ForbiddenEntryPoint"&gt;
        &lt;intercept-url pattern="/api/**" access="ROLE_USER"/&gt;
        &lt;custom-filter ref="apikeyAuthFilter" position="FORM_LOGIN_FILTER"/&gt;
    &lt;/http&gt;
    &lt;http auto-config="false"&gt;
        &lt;form-login/&gt;
        &lt;intercept-url pattern="/**" access="ROLE_USER"/&gt;
        &lt;logout invalidate-session="true"/&gt;
    &lt;/http&gt;
During startup I get an NPE, partial stack trace below.
Caused by: java.lang.NullPointerException
	at org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.registerFilterChainProxy(HttpSecurityBeanDefinitionParser.java:260)
	at org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.parse(HttpSecurityBeanDefinitionParser.java:89)
	at org.springframework.security.config.SecurityNamespaceHandler.parse(SecurityNamespaceHandler.java:88)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1335)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1325)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:93)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)
	... 37 more
Relevant code area
            for (BeanDefinition matcherBean : filterChainMap.keySet()) {
                if (existingFilterChainMap.containsKey(matcherBean)) {
                    Map&lt;Integer,ValueHolder&gt; args = matcherBean.getConstructorArgumentValues().getIndexedArgumentValues();
                    pc.getReaderContext().error("The filter chain map already contains this request matcher ["
---&gt;                            + args.get(0).getValue() + ", " +args.get(1).getValue() + "]", source);
args is size 0 in my case
Serge