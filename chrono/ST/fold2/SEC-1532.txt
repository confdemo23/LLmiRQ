ProtectPointcutPostProcessor should not re-attempt to match the pointcuts against methods when used with prototype beans
In our web application we use spring security combining url security as well as method security using XML configuration only.
The webapp is being deployed on a stock Tomcat 6.0.29 using JDK6.

URL-security is configured using &lt;sec:intercept-url /&gt; tags only.


Method-security is configured using &lt;sec:protect-pointcut /&gt; tags only referencing a central Pointcuts-class. The pointcut class implements dummy methods being referenced in the method security XML configuration. The reason for doing so is to have descriptive names for the pointcut expressions. The pointcut expressions are being configured using @Pointcut annotations.

The URL- and method-security XML configuration files are seperate. We don&amp;apos;t use any annotation based security configuration. We recognized a very slow bootstrap performance as well as a very poor runtime performance being caused by spring security. When disabling method-security performance is as expected.
The performance difference at bootstrap is about 30 sec with method-security enabled and about 6 sec with method-security disabled.
During runtime opening pages takes a couple seconds when method-security is enabled and only a fraction of a second with method-security disabled.
The performance difference is so huge and evident that we did not even make concrete performance measurements in order to quantize the difference.
During bootstrap we made random thread dumps recognizing the same pattern over and over where the main-Threads is stuck:
"main" prio=10 tid=0x080e1800 nid=0xbcc waiting on condition [0xb73e6000]
   java.lang.Thread.State: RUNNABLE
        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)

locked &lt;0xa4000500&gt; (a sun.misc.Launcher$AppClassLoader)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
locked &lt;0xa4000500&gt; (a sun.misc.Launcher$AppClassLoader)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1560)
locked &lt;0xa4149438&gt; (a org.apache.catalina.loader.WebappClassLoader)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1491)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)
        at org.aspectj.weaver.World.resolveToReferenceType(World.java:388)
        at org.aspectj.weaver.World.resolve(World.java:279)
        at org.aspectj.weaver.patterns.SimpleScope.lookupType(SimpleScope.java:57)
        at org.aspectj.weaver.bcel.AtAjAttributes$BindingScope.lookupType(AtAjAttributes.java:1680)
        at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope(WildTypePattern.java:716)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:703)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:631)
        at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:194)
        at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:131)
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:332)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:310)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:288)
        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.postProcessBeforeInitialization(ProtectPointcutPostProcessor.java:103)
        ...

During runtime load we also made thread dumps randomly recognized the same pattern where the request threads are being stuck. During runtime we have another problem that other http request are being blocked. This is a production no-go.
The blocking thread:
"http-8120-6" daemon prio=10 tid=0x08e1a000 nid=0x7912 waiting on condition [0x9a8ff000]
   java.lang.Thread.State: RUNNABLE
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)

locked &lt;0xa3fab6c0&gt; (a sun.misc.Launcher$ExtClassLoader)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:296)
locked &lt;0xa3fab678&gt; (a sun.misc.Launcher$AppClassLoader)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
locked &lt;0xa3fab678&gt; (a sun.misc.Launcher$AppClassLoader)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1560)
locked &lt;0xa40cf610&gt; (a org.apache.catalina.loader.WebappClassLoader)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1491)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)
        at org.aspectj.weaver.World.resolveToReferenceType(World.java:388)
        at org.aspectj.weaver.World.resolve(World.java:279)
        at org.aspectj.weaver.patterns.SimpleScope.lookupType(SimpleScope.java:57)
        at org.aspectj.weaver.bcel.AtAjAttributes$BindingScope.lookupType(AtAjAttributes.java:1680)
        at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope(WildTypePattern.java:716)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:703)
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:631)
        at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:194)
        at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:131)
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:332)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:310)
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:288)
        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.postProcessBeforeInitialization(ProtectPointcutPostProcessor.java:103)
        ...

The blocked threads:
"http-8120-5" daemon prio=10 tid=0x08e74c00 nid=0x7910 waiting for monitor entry [0x9a950000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)
        ...
"http-8120-4" daemon prio=10 tid=0x08e73000 nid=0x790f waiting for monitor entry [0x9a9a1000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        ...
"http-8120-3" daemon prio=10 tid=0x09325000 nid=0x790e waiting for monitor entry [0x9a9f2000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        ...
"http-8120-1" daemon prio=10 tid=0x093d8400 nid=0x3f18 waiting for monitor entry [0x9af95000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:247)
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)
        ...
Please find attached a source code and configuration sample.
We found a couple places on the forums where the problem is being recognized but so far we did not find any JIRA issue.
Our current planned resolution is to avoid pointcut expressions for method-security at all. Instead we will use either annotations or the intercept-methods bean decorator and hope that performance increases. It would be nice though to use pointcut expressions.