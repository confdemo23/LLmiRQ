SDG&apos;s Repository extension does not properly handle custom @Query annotated Repository methods returning non-Collection, non-Entity-based return values.
If a Repository method is annotated with the @Query annotation specifying a custom Query/OQL statement, such as ...
@Query(SELECT count FROM /Users u WHERE u.username LIKE $1")
Integer countUsersByUsernameLike(String username);
SDG throws an IllegalStateException...






Caused by: java.lang.IllegalStateException: Unsupported query: select count(*) from /users




       at org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery.execute(StringBasedGemfireRepositoryQuery.java:136)




       at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:384)




       at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:344)




       at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)




       at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)




       at com.sun.proxy.$Proxy53.totalSubscriberEntries(Unknown Source)




       at com.gopivotal.vodafone.geopoc.service.SubscriberService.findTotalSubscriberEntries(SubscriberService.java:69)




       at com.gopivotal.vodafone.geopoc.GeoApplication.test(GeoApplication.java:176)




       at com.gopivotal.vodafone.geopoc.GeoApplication.run(GeoApplication.java:135)




       at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:669)




       ... 5 common frames omitted





