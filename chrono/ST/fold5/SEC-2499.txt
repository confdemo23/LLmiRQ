GlobalMethodSecurityBeanDefinitionParser cannot refer to expressionHandler in parent context
This appears to have been introduced in 3.2.x, as it was working fine in 3.1.x.  If you define the referenced expressionHandler bean in the root WebApplicationContext, you get the stacktrace below:
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &amp;apos;expressionHandler&amp;apos; is defined
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:638)
	at org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser$LazyInitBeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry(GlobalMethodSecurityBeanDefinitionParser.java:455)
...
Would it make sense to just skip the post-processing case in this case?  As it would be trying to change the bean definition of a bean that it doesn&amp;apos;t actually control.