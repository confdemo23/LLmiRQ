Integer IDs are not supported despite documentation ensures they are
The documentation (reference) says that int domain object ids are supported (Chapter 23.3):
"Hopefully ObjectIdentityImpl will prove sufficient, as it provides a large number of ways in which it can be used. Most
people will have domain objects that contain a public Serializable getId() method. If the return type is
long, or compatible with long (eg an int), you will find you need not give further consideration to
ObjectIdentity issues."
Unfortunately I&amp;apos;m getting assertion failures when using ints as IDs:
java.lang.IllegalArgumentException: This class requires ObjectIdentity.getIdentifier() to be a LongObject of class [java.lang.Integer] must be an instance of class java.lang.Long
	org.springframework.util.Assert.isInstanceOf(Assert.java:337)
	org.springframework.security.acls.jdbc.BasicLookupStrategy$1.setValues(BasicLookupStrategy.java:296)
	org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:621)
	org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:566)
	org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:616)
	org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:645)
	org.springframework.security.acls.jdbc.BasicLookupStrategy.lookupObjectIdentities(BasicLookupStrategy.java:289)
	org.springframework.security.acls.jdbc.BasicLookupStrategy.readAclsById(BasicLookupStrategy.java:421)
	org.springframework.security.acls.jdbc.JdbcAclService.readAclsById(JdbcAclService.java:114)
	org.springframework.security.acls.jdbc.JdbcAclService.readAclById(JdbcAclService.java:99)