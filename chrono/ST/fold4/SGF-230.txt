Cannot specify a Disk Store to be used for overflow on a Gateway Sender without enabling persistence.
Getting the exception pasted below trying to specify the Disk Store for a Gateway Sender for overflow purposes ONLY.  Note that GW Sender Queue overflow is implicit, and reverts to using the "default" disk store if none is specified.  This can lead to unexpected disk usage in the GemFire process&amp;apos; runtime directory, and, on the case of RTI, data being written where security policies do not permit.  There should be an option to specify the overflow disk store without having to also enable persistence.  This would also match the way Region configuration works.
WORKAROUND to a enable custom-configured Disk Store for GW Sender overflow-to-disk when persistence for recovery (persistent="false") is not enabled: 

Define the "DEFAULT" (named as such) Disk Store explicitly, which allows full control in specifying related attributes/elements such as target Disk Directories.


Exclude the disk-store-ref from the gateway-sender configuration.


The shortfall of this work-around is that GW Sender queue overflow must share the same disk store configuration as other SDG persistent elements that also revert to using the DEFAULT disk store.

Exception is:
java.lang.IllegalArgumentException: specifying a disk store requires persistent property to be true
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1512)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)
        at org.springframework.context.support.GenericXmlApplicationContext.&lt;init&gt;(GenericXmlApplicationContext.java:70)
        at com.gopivotal.rti.boot.spring.AbstractXmlSpringInitializer.initSpring(AbstractXmlSpringInitializer.java:48)
        at com.gopivotal.rti.boot.spring.AbstractSpringInitializer.init(AbstractSpringInitializer.java:49)
        at com.gopivotal.rti.boot.AbstractInitializer.init(AbstractInitializer.java:52)
        at com.gopivotal.rti.boot.impl.SimpleLifecycle.doStart(SimpleLifecycle.java:97)
Configuration that caused the Exception is:
	&lt;gfe:gateway-sender id="toGrid2SenderSerial" remote-distributed-system-id="$
{rti.distgrid.distributed-system-id}
"
	    batch-size="$
{rti.ingestgrid.gateway-sender.batch-size}
"
	    batch-time-interval="$
{rti.ingestgrid.gateway-sender.batch-time-interval}
"
	    maximum-queue-memory="$
{rti.ingestgrid.gateway-sender.maximum-queue-memory}
"
	    parallel="false"
	    dispatcher-threads="$
{rti.ingestgrid.gateway-sender.dispatcher-threads}
"
	    alert-threshold="$
{rti.ingestgrid.gateway-sender.alert-threshold}
"
	    enable-batch-conflation="false"
	    persistent="false"
	    disk-store-ref="refgw"
	    socket-buffer-size="1048576"
	    socket-read-timeout="10000"
	    order-policy="KEY"
	    manual-start="false"&gt;