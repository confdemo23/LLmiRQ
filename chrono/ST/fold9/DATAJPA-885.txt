No aliases found in result tuple
After migrating Spring Data application from Gosling-SR4 to Hopper-SR1 release, all custom queries that extends JpaRepository throws the following message:






Caused by: java.lang.IllegalStateException: No aliases found in result tuple! Make sure your query defines aliases!




    at org.springframework.data.jpa.repository.query.AbstractJpaQuery$TupleConverter.convert(AbstractJpaQuery.java:246) [spring-data-jpa-1.10.1.RELEASE.jar:]




    at org.springframework.data.repository.query.ResultProcessor$ChainingConverter.convert(ResultProcessor.java:185) [spring-data-commons-1.12.1.RELEASE.jar:]




    at org.springframework.data.repository.query.ResultProcessor$ChainingConverter$1.convert(ResultProcessor.java:173) [spring-data-commons-1.12.1.RELEASE.jar:]




    at org.springframework.data.repository.query.ResultProcessor$ChainingConverter.convert(ResultProcessor.java:185) [spring-data-commons-1.12.1.RELEASE.jar:]




    at org.springframework.data.repository.query.ResultProcessor.processResult(ResultProcessor.java:142) [spring-data-commons-1.12.1.RELEASE.jar:]




    at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:107) [spring-data-jpa-1.10.1.RELEASE.jar:]




    at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:92) [spring-data-jpa-1.10.1.RELEASE.jar:]




    at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:482) [spring-data-commons-1.12.1.RELEASE.jar:]




    at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460) [spring-data-commons-1.12.1.RELEASE.jar:]




    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) [spring-aop-4.2.5.RELEASE.jar:4.2.5.RELEASE]




    at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) [spring-tx-4.2.5.RELEASE.jar:4.2.5.RELEASE]




    at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281) [spring-tx-4.2.5.RELEASE.jar:4.2.5.RELEASE]




    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) [spring-tx-4.2.5.RELEASE.jar:4.2.5.RELEASE]




    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) [spring-aop-4.2.5.RELEASE.jar:4.2.5.RELEASE]




    at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136) [spring-tx-4.2.5.RELEASE.jar:4.2.5.RELEASE]




    ... 113 more












public interface UserProfileAccessGroupRepository extends




        JpaRepository&lt;UserProfileAccessGroup, UserProfileAccessGroupPK&gt; {









    @Modifying




    @Query("DELETE FROM UserProfileAccessGroup upag WHERE upag.id.accessGroup = ?1")




    public void deleteByAccessGroup(AccessGroup accessGroup);









    @Modifying




    @Query("DELETE FROM UserProfileAccessGroup upag WHERE upag.id.userProfile = ?1")




    public void deleteByUserProfile(UserProfile userProfile);









    @Query("SELECT upag.id.accessGroup FROM UserProfileAccessGroup upag WHERE upag.id.userProfile = ?1")




    public List&lt;AccessGroup&gt; findAccessGroupByUserProfile(UserProfile userProfile);









    @Query("SELECT upag.id.accessGroup FROM UserProfileAccessGroup upag WHERE upag.id.userProfile = ?1 AND upag.id.accessGroup.functionality = false")




    public List&lt;AccessGroup&gt; findGroupByUserProfile(UserProfile userProfile);









    public List&lt;UserProfileAccessGroup&gt; findByExpirationDateBefore(Date date);




}












@Entity




public class UserProfileAccessGroup implements Serializable {









    private static final long serialVersionUID = 1L;









    @EmbeddedId




    private UserProfileAccessGroupPK id;









    private Date expirationDate;









    @ManyToOne




    @JoinColumn(name = "authorizedBy")




    private UserProfile authorizedBy;









    public UserProfileAccessGroupPK getId() {









        if (id == null) {




            id = new UserProfileAccessGroupPK();




        }




        return id;




    }









    public void setId(UserProfileAccessGroupPK id) {




        this.id = id;




    }









    public Date getExpirationDate() {




        return expirationDate;




    }









    public void setExpirationDate(Date expirationDate) {




        this.expirationDate = expirationDate;




    }









    public UserProfile getAuthorizedBy() {




        return authorizedBy;




    }









    public void setAuthorizedBy(UserProfile authorizedBy) {




        this.authorizedBy = authorizedBy;




    }









    @Embeddable




    public static class UserProfileAccessGroupPK implements Serializable {









        private static final long serialVersionUID = 1L;









        @ManyToOne




        @JoinColumn(name = "accessGroupId")




        private AccessGroup accessGroup;









        @ManyToOne




        @JoinColumn(name = "userProfileId")




        private UserProfile userProfile;









        public UserProfileAccessGroupPK() {




        }









        public UserProfileAccessGroupPK(AccessGroup accessGroup, UserProfile userProfile) {




            this.accessGroup = accessGroup;




            this.userProfile = userProfile;




        }









        public AccessGroup getAccessGroup() {




            return accessGroup;




        }









        public void setAccessGroup(AccessGroup accessGroup) {




            this.accessGroup = accessGroup;




        }









        public UserProfile getUserProfile() {




            return userProfile;




        }









        public void setUserProfile(UserProfile userProfile) {




            this.userProfile = userProfile;




        }









        @Override




        public int hashCode() {




            final int prime = 31;




            int result = 1;




            result = prime * result + ((accessGroup == null) ? 0 : accessGroup.hashCode());




            result = prime * result + ((userProfile == null) ? 0 : userProfile.hashCode());




            return result;




        }









        @Override




        public boolean equals(Object obj) {




            if (this == obj)




                return true;




            if (obj == null)




                return false;




            if (getClass() != obj.getClass())




                return false;




            UserProfileAccessGroupPK other = (UserProfileAccessGroupPK) obj;




            if (accessGroup == null) {




                if (other.accessGroup != null)




                    return false;




            } else if (!accessGroup.equals(other.accessGroup))




                return false;




            if (userProfile == null) {




                if (other.userProfile != null)




                    return false;




            } else if (!userProfile.equals(other.userProfile))




                return false;




            return true;




        }




    }




}





