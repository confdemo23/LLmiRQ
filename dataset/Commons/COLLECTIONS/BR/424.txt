Surprising exception by CompositeSet in a situation where CompositeCollection works fine
We have a method that uses a CompositeCollection. Here&amp;apos;s a simplified version of it:
  void m(CompositeCollection coll) 
{
    coll.addComposited(new TreeBag());
  }

It works fine when the argument is a CompositeCollection, but it throws an exception when the argument is a CompositeSet. E.g.:
  m(new CompositeCollection());  // OK
  m(new CompositeSet());         // IllegalArgumentException
Although the exception is documented in CompositeSet, this behavior is very surprising. Is there a way to have m() accept CompositeCollections without running into this exception? The only solution that comes to my mind is to dynamically check the type of &amp;apos;coll&amp;apos; in m(), but this is a rather nasty work-around.
A better solution may be to make the genericity of CompositeCollection explicit by adding a type parameter:
  class CompositeCollection&lt;T extends Collection&gt; {
    void addComposited(T c) 
{ /* .. */ }
  }

  class CompositeSet extends CompositeCollection&lt;Set&gt; {
    @Override void addComposited(Set c) { /* .. */ }
  }
This way, users of CompositeCollection must choose the kind of collections that can be composed and will not encounter surprises, such as the above.