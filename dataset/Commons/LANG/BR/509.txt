OutOfMemory Error caused by ExtendedMessageFormat
It is possible to let ExtendedMessageFormat cause an OutOfMemory Error (Java heap space) - no matter how large you define the memory, because the code produces an endless loop that extends a StringBuffer ad infinitum.
Code to reproduce:
instantiate an ExtendedMessageFormat object using the constructor 
public ExtendedMessageFormat(String pattern, Locale locale, Map registry) 
locale and registry (not null) don&amp;apos;t matter actually, but pattern as String looks like this:
{{The field &amp;apos;&amp;apos;
{0}
&amp;apos;&amp;apos; must be completed}}
notice the doubled single quotes.
The constructor then executes applyPattern(pattern)
In applyPattern, line 158 (that is inside the loop over the pattern length)  appendQuotedString(pattern, pos, stripCustom, true); is called, it is the last statement for that case in the loop. 
In  appendQuotedString, line 422 the quote character gets appended to the return StringBuffer, then return. The problem in fact is, that the pointer (ParsePosition pos) isn&amp;apos;t updated and after return the procedure will check the same character again and again and again. 
Primitive workaround: no use of single quotes in messages as input of ExtendedMessageFormat.
