TransactionAttributes swallows Exceptions
If the TransactionAttributes determines that a Transaction shouldn&amp;apos;t be rolled back, the exception is effectively swallowed:
try 
{
						exitStatus = tasklet.execute(contribution, attributes);
					}
					catch (Error e) {
						if (transactionAttribute.rollbackOn(e)) 
{
							throw e;
						}
						else {
							logger.error("Ecountered error that should not cause rollback: ", e);
						}
					}
					catch (Exception e) {
						if (transactionAttribute.rollbackOn(e)) {							throw e;						}
						else 
{
							logger.error("Ecountered error that should not cause rollback: ", e);
						}
					}
So, for example, if the TransactionAttributes are set to not rollback a SkipLimitExceededException, it won&amp;apos;t be rolledback, effectively preventing it from going up to the StepOperations and causing the step to fail.  Of course, someone shouldn&amp;apos;t think to do that, but it&amp;apos;s just one example.  If someone sets any exception to be on the fatal list, but messes up and puts an exception in the attribute list to cause rollback, the step won&amp;apos;t fail.
I propose that the rollback decision on transaction attribute be used solely to determine whether the transaction is committing, but that the exception should still be propagated up to the StepOperations to determine whether or not it should cause failure.