Code exception is masked by a batch exception
I use a listener class like this:
@Transactional(value = CreditorServicesConstants.TRANSACTION_MANAGER, propagation = Propagation.REQUIRES_NEW)
public class AlertOnErrorItemReadListener implements ItemReadListener&lt;Object&gt; {
  public void onReadError(Exception ex) 
{
     ... some code
    
     FileIn myFileIn = (FileIn) dao.findFileByFileName(filename);

     ... some other code
  }


When I import a test file which contains an error in one record the onReadError method is called with a FlatFileParseException.  
Now the dao call throws a JPA NonUniqueResultException which is translated into org.springframework.dao.IncorrectResultSizeDataAccessException.
This last exception however is never seen nor reported in log output. Only the FlatFileParseException is logged and the code after the dao call is silently
not executed:
[03/08/2011 09:52:49][DEBUG] (AlertOnErrorItemReadListener.java:onReadError:81) EmddItemReadListener.onReadError(class org.springframework.batch.item.file.FlatFileParseException)
[03/08/2011 09:52:49][INFO ] (AlertOnErrorItemReadListener.java:onReadError:116) A technical failure event is raised with the following error message: Parsing error at line: 3 in resource=[URL file:./target/test-classes/data//dom80/work/dom80MigrationTestfile_readError.dat], input=[200000001reference3334445556BE44445555666677111222333446000000 ...
Hibernate: select filein0_.id as id58_, filein0_.creationdate as creation3_58_, filein0_.creditororganization_id as credito15_58_, filein0_.errorcode as errorcode58_, filein0_.errordescription as errordes5_58_, filein0_.fileformat as fileformat58_, filein0_.filename as filename58_, filein0_.lastupdate as lastupdate58_, filein0_.nbofoperations as nbofoper9_58_, filein0_.status as status58_, filein0_.answered as answered58_, filein0_.nbofokrequests as nbofokr12_58_ from File filein0_ where filein0_.DTYPE=&amp;apos;FileIn&amp;apos; and filein0_.filename=? limit ?
[03/08/2011 09:52:49][ERROR] (AbstractStep.java:execute:212) Encountered an error executing the step
org.springframework.batch.core.listener.StepListenerFailedException: Error in onReadError.
java.lang.IllegalArgumentException: Unable to invoke method: [public final void $Proxy61.onReadError(java.lang.Exception)] on object: [net.awl.emdd.creditor.files.in.chunk.dom80.AlertOnErrorListener@11a4e9b] with arguments: [[org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 3 in resource=[URL file:./target/test-classes/data//dom80/work/dom80MigrationTestfile_readError.dat], input=[200000001reference3334445556BE4444555566667711122233344600000001012010Erwin Lindemann                    125, rue de Bouton 4748 Hergenrath 4748      Hergenrath               KREDBEBB   3334445556614122010]]]
	at org.springframework.batch.core.listener.MulticasterBatchListener.onReadError(MulticasterBatchListener.java:232) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:95) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:148) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:108) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:103) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:68) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:386) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) ~[spring-tx-3.0.4.RELEASE.jar:3.0.4.RELEASE]
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:250) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195) ~[spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48) [spring-core-3.0.4.RELEASE.jar:3.0.4.RELEASE]
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:114) [spring-batch-core-2.1.8.RELEASE.jar:na]
	at net.awl.emdd.creditor.files.in.chunk.dom80.TestDom80Migration.runJob(TestDom80Migration.java:100) [test-classes/:na]
After analysing the Spring Batch sources I found the location why this happened:
The Javadoc of StepListenerFailedException constructor says about the two Exception parameters:
public StepListenerFailedException(String message,
                                   Throwable ex,
                                   RuntimeException e)
Parameters:
    message - describes the error to the user
    ex - the exception that was thrown by a listener
    e - the exception that caused the skip
Following the documentation, in MulticasterBatchListener.onReadError(Exception) the two Exceptions in StepListenerFailedException constructor should be set vice versa:
public void onReadError(Exception ex) {
		try 
{
			itemReadListener.onReadError(ex);
		}
		catch (RuntimeException e) {
			throw new StepListenerFailedException("Error in onReadError.", e, ex);
		}
}

instead of

public void onReadError(Exception ex) {
		try {			itemReadListener.onReadError(ex);		}
		catch (RuntimeException e) 
{
			throw new StepListenerFailedException("Error in onReadError.", ex, e);
		}
}