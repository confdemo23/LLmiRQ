JobLauncher allows restart of job_execution with status UNKNOWN
After experiencing some technical problems with our database, several job_execution and step_execution ended up in status UNKNOWN.
Normally the JobLauncher checks this and does not allow restart of these jobs. But it looks like the checks that are done do not cover all scenarios.
For example it was possible to restart this job:











BATCH.BATCH_JOB_EXECUTION:









JOB_EXECUTION_ID,VERSION,JOB_INSTANCE_ID,CREATE_TIME,START_TIME,END_TIME,STATUS,EXIT_CODE,EXIT_MESSAGE,LAST_UPDATED




1558162,2,1534110,2014-09-23 23:50:19.117,2014-09-23 23:50:19.125,2014-09-24 09:00:07.124,UNKNOWN ,UNKNOWN,,2014-09-24 09:00:07.171












BATCH.BATCH_STEP_EXECUTION:









STEP_EXECUTION_ID,VERSION,STEP_NAME,JOB_EXECUTION_ID,START_TIME,END_TIME,STATUS,COMMIT_COUNT,READ_COUNT,FILTER_COUNT,WRITE_COUNT,READ_SKIP_COUNT,WRITE_SKIP_COUNT,PROCESS_SKIP_COUNT,ROLLBACK_COUNT,EXIT_CODE,EXIT_MESSAGE,LAST_UPDATED




5536872,31,stepname,1558162,2014-09-23 23:50:19.166,[NULL],STARTED ,30,2672,0,2672,0,0,0,0,EXECUTING,,2014-09-24 00:19:08.697






The job execution was in status UNKNOWN, and the step execution was in status STARTED.






SimpleJobLauncher.java (run)






        JobExecution lastExecution = jobRepository.getLastJobExecution(job.getName(), jobParameters);




        if (lastExecution != null) {




            if (!job.isRestartable()) {




                throw new JobRestartException("JobInstance already exists and is not restartable");




            }




            /*




             * validate here if it has stepExecutions that are UNKNOWN




             * retrieve the previous execution and check




             */




            for (StepExecution execution : lastExecution.getStepExecutions()) {




                if (execution.getStatus() == BatchStatus.UNKNOWN) {




                    //throw




                    throw new JobRestartException("Step [" + execution.getStepName() + "] is of status UNKNOWN"); 




                }//end if




            }//end for            




        }












SimpleJobRepository.java (createJobExecution)






            List&lt;JobExecution&gt; executions = jobExecutionDao.findJobExecutions(jobInstance);









            // check for running executions and find the last started




            for (JobExecution execution : executions) {




                if (execution.isRunning()) {




                    throw new JobExecutionAlreadyRunningException("A job execution for this job is already running: " 




                            + jobInstance);




                }









                BatchStatus status = execution.getStatus();




                if (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED) {




                    throw new JobInstanceAlreadyCompleteException(




                            "A job instance already exists and is complete for parameters=" + jobParameters




                            + ".  If you want to run this job again, change the parameters.");




                }




            }






So the code is only checking whether the job execution is STARTED, or the step execution is UNKNOWN. In our case, it was the other way around.