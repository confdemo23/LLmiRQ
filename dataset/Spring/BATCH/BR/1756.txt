Make  round-trip JobParameters->Properties->JobParameters work for double parameters
Make  round-trip JobParameters-&gt;Properties-&gt;JobParameters work for double parameters. Here is the customer&amp;apos;s use case for this - "I want to use the JobOperator interface to start jobs and that requires passing the parameters in the string format. So I need a way to generate a correct string representation of JobParameters that will be accepted by JobOperator. I assumed DefaultJobParametersConverter is the way to go. But to be even more specific I&amp;apos;m trying to build a mechanism for starting jobs in a clustered environment and the approach is to use JMS messages. The client would invoke an API (passing JobParameters) which behind the scenes will take the JobParameters, convert it to the String format and put it in a JMS messages that gets placed on a queue. On the other side of the queue a component receives the message, extracts the String of job parameters and calls JobOperator. I don&amp;apos;t want to be responsible for creating the correct string format of JobParameters so I&amp;apos;m counting on classes provided by the framework." 
Code snippet for demonstration:
@Test
public void testDefaultJobParametersConverter() {
DefaultJobParametersConverter converter = new DefaultJobParametersConverter();
JobParametersBuilder builder = new JobParametersBuilder();
Double val = Double.valueOf(222);
builder.addDouble("doubleParam", val);
JobParameters params = builder.toJobParameters();
Map&lt;String, JobParameter&gt; map = params.getParameters();
JobParameter jp = map.get("doubleParam");
assertNotNull(jp);
assertEquals(ParameterType.DOUBLE, jp.getType());
Properties props = converter.getProperties(params);
params = converter.getJobParameters(props);
map = params.getParameters();
jp = map.get("doubleParam");
assertNotNull(jp);
assertEquals(ParameterType.DOUBLE, jp.getType());
assertEquals(val, jp.getValue());
}