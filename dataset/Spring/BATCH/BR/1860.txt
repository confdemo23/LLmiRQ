JdbcPagingItemReader can skip rows for Derby (and DB/2, SqlServer and Sybase?) due to paging by row number occuring before ordering
The queries (generated by DerbyPagingQueryProvider) are of this form.
 first page query
SELECT * FROM (
    SELECT &lt;select clause&gt;, ROW_NUMBER() OVER () AS ROW_NUMBER
    FROM &lt;from clause&gt;
    WHERE &lt;where clause&gt;
    ORDER BY &lt;sort key&gt; ASC
) AS TMP_SUB
WHERE TMP_SUB.ROW_NUMBER &lt;= &lt;page size&gt;
 remaining pages query
SELECT * FROM (
    SELECT &lt;select clause&gt;, ROW_NUMBER() OVER () AS ROW_NUMBER
    FROM &lt;from clause&gt;
    WHERE &lt;where clause&gt; AND ID &gt; &lt;last sort key value&gt;
    ORDER BY ID ASC
) AS TMP_SUB
WHERE TMP_SUB.ROW_NUMBER &lt;= &lt;page size&gt;
Most of this is determined by the superclass SqlWindowingPagingQueryProvider, which is also extended by Db2PagingQueryProvider, SqlServerPagingQueryProvider and SybasePagingQueryProvider.
Unfortunately (at least for Derby, I haven&amp;apos;t verified for DB/2, SqlServer or Sybase) the row number is appended to the unordered rows before the ordering.  This results in rows sometimes being skipped when the page size is less than the total number of rows as the subsequent remaining rows queries will retrieve only rows with a sort key value &gt; the last row&amp;apos;s sort key value.
To illustrate this more clearly take this simple schema and data.
CREATE TABLE SAMPLE (
    ID VARCHAR(10) NOT NULL
);
INSERT INTO SAMPLE (ID) VALUES (&amp;apos;Z&amp;apos;);
INSERT INTO SAMPLE (ID) VALUES (&amp;apos;A&amp;apos;);
This would involve two queries with the first query retrieving the wrong row (not the first by sort key) and second query no rows at all.
 first page query
SELECT * FROM (
    SELECT ID, ROW_NUMBER() OVER () AS ROW_NUMBER
    FROM SAMPLE
    ORDER BY ID ASC
) AS TMP_SUB
WHERE TMP_SUB.ROW_NUMBER &lt;= 1
 returns &amp;apos;Z&amp;apos;, 1
 remaining pages query
SELECT * FROM (
    SELECT ID, ROW_NUMBER() OVER () AS ROW_NUMBER
    FROM SAMPLE
    WHERE ID &gt; &amp;apos;Z&amp;apos;
    ORDER BY ID ASC
) AS TMP_SUB
WHERE TMP_SUB.ROW_NUMBER &lt;= 1
 returns (no rows)
I suggest ensuring that the row number column is added after the ordering.
 first page query
SELECT * FROM (
   SELECT
       &lt;select clause&gt;,
       ROW_NUMBER() OVER () AS ROW_NUMBER
   FROM (
       SELECT &lt;select clause&gt;
       FROM &lt;from clause&gt;
       WHERE &lt;where clause&gt;
       ORDER BY &lt;sort key&gt;
   ) AS TMP_ORDERED
) AS TMP_SUB
WHERE TMP_SUB.ROW_NUMBER &lt;= &lt;page size&gt;
 remaining pages query
SELECT * FROM (
   SELECT
       &lt;select clause&gt;,
       ROW_NUMBER() OVER () AS ROW_NUMBER
   FROM (
       SELECT &lt;select clause&gt;
       FROM &lt;from clause&gt;
       WHERE &lt;where clause&gt; AND &lt;sort key&gt; &gt; &lt;last sort key value&gt;
       ORDER BY &lt;sort key&gt;
   ) AS TMP_ORDERED
) AS TMP_SUB
WHERE TMP_SUB.ROW_NUMBER &lt;= &lt;page size&gt;
Alternatively (although I don&amp;apos;t wish to propose this), no ordering or sort key is required at all (for descendants of SqlWindowingPagingQueryProvider). A range of row numbers could be selected for each page.  I presume this is undesirable as the developer may be expecting order (even though it&amp;apos;s only a side-effect of the paging):
 first and remaining pages query (with &lt;last row number&gt; initialised to 0)
SELECT * FROM (
   SELECT
       &lt;select clause&gt;,
       ROW_NUMBER() OVER () AS ROW_NUMBER
   FROM (
       SELECT &lt;select clause&gt;
       FROM &lt;from clause&gt;
       WHERE &lt;where clause&gt;
   ) AS TMP_ORDERED
) AS TMP_SUB
WHERE TMP_SUB.ROW_NUMBER &gt; &lt;last row number&gt; AND TMP_SUB.ROW_NUMBER &lt;= &lt;last row number + page size&gt;
Although I&amp;apos;ve selected a priority of major, this issue doesn&amp;apos;t currently affect us.  We shifted to HSQL from Derby for testing due to BATCH-1848 and I&amp;apos;m raising it only as I detected the problem when testing for regressions.