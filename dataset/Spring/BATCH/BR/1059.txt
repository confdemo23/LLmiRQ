BATCH_JOB_INSTANCE.JOB_KEY ignores Date milliseconds
When a Date is used as a Job Parameter it is stored correctly (including milliseconds) in BATCH_JOB_PARAMS but the JOB_KEY in BATCH_JOB_INSTANCE does not include milliseconds when generating the key. The problem is in JdbcJobInstanceDao.createJobKey, it just blindly toString&amp;apos;s all the parameters and Date&amp;apos;s toString hides some data.
Instead of blindly calling toString on all parameters a better approach may be to use type-specific String formatting, this would also be slightly more efficient as it avoids adding all parameters to a single Map then iterating that and removes an extra string concatenation operation.
    private String createJobKey(JobParameters jobParameters) {
        StringBuffer stringBuffer = new StringBuffer();
        final Map stringParameters = jobParameters.getStringParameters();
        for (Iterator it = stringParameters.entrySet().iterator(); it.hasNext() 
{
            Entry entry = (Entry) it.next();
            stringBuffer.append(entry.getKey());
            stringBuffer.append("=");
            
            stringBuffer.append(entry.getValue());
            stringBuffer.append(";");
        }

        final Map longParameters = jobParameters.getLongParameters();
        for (Iterator it = longParameters.entrySet().iterator(); it.hasNext() {            Entry entry = (Entry) it.next();            stringBuffer.append(entry.getKey());            stringBuffer.append("=");                        stringBuffer.append(entry.getValue());            stringBuffer.append(";");        }

        final Map doubleParameters = jobParameters.getDoubleParameters();
        for (Iterator it = doubleParameters.entrySet().iterator(); it.hasNext() 
{
            Entry entry = (Entry) it.next();
            stringBuffer.append(entry.getKey());
            stringBuffer.append("=");
            
            stringBuffer.append(entry.getValue());
            stringBuffer.append(";");
        }

        final Map dateParameters = jobParameters.getDateParameters();
        for (Iterator it = dateParameters.entrySet().iterator(); it.hasNext() {
            Entry entry = (Entry) it.next();
            stringBuffer.append(entry.getKey());
            stringBuffer.append("=");
            final Date date = (Date)entry.getValue();
            final String formattedDate;
            synchronized (DATE_PARAMETER_FORMAT) 
{
                //Logic cloned from java.util.Date
                DATE_PARAMETER_FORMAT.setTimeZone(TimeZone.getDefault());
                formattedDate = DATE_PARAMETER_FORMAT.format(date);
            }
            stringBuffer.append(formattedDate);
            stringBuffer.append(";");
        }
        return stringBuffer.toString();
    }