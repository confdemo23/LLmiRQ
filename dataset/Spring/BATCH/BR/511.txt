read failures cause rollback
when using &amp;apos;skipping&amp;apos;, the item handler rethrows any read exception to delegate to the exception handler
protected Object read(StepContribution contribution) throws Exception {
		try 
{
			return getItemReader().read();
		}
		catch (Exception e) {
			if (itemSkipPolicy.shouldSkip(e, contribution.getStepSkipCount())) {
				contribution.incrementSkipCount();
				if (getItemReader() instanceof Skippable) 
{
					((Skippable) getItemReader()).skip();
				}
			}
			===&gt;&gt; throw e; &lt;&lt;===
		}
	}
the exception handler picks up the exception at the step level
...
SimpleLimitExceptionHandler exceptionHandler = new SimpleLimitExceptionHandler();
			exceptionHandler.setLimit(skipLimit);
			exceptionHandler.setExceptionClasses(skippableExceptionClasses);
			exceptionHandler.setFatalExceptionClasses(fatalExceptionClasses);
			setExceptionHandler(exceptionHandler);
			getStepOperations().setExceptionHandler(getExceptionHandler());
...
so, whenever you encounter an exception in the read, it rolls back all successful writes instead of just skipping the item and continuing.