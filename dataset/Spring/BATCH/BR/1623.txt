A chunk configured with processor-transactional="true" shouldn&apos;t require a retry- or skip-limit
At the moment when you configure processor-transactional="true" on a chunk the framework&amp;apos;s validation forces you to also specify a retry-limit or skip-limit. First of all, when you specify a &lt;retry-policy&gt; element this requirement still exists, even though the policy overrules the configured retry-limit, so that&amp;apos;s an error in the validation (StepParserStepFactoryBean.java:466). 
Second of all, it might not really be necessary to enforce this requirement at all.
From the brief private discussion on Skype with Dave about this:






[12:33:45 PM] David Syer: I guess it makes sense that processor-transactional="true" requires one or the other.  But maybe we should lift that restriction too (allow the middleware to deal with retry)?




[12:35:20 PM] Joris Kuipers: could be, but wouldn&amp;apos;t that only be the case if your ItemReader was transactional as well? I cannot easily imagine a scenario where a non-transactional reader would be followed by a transactional processor where middleware would take care of retries for the processor...




[12:35:46 PM] Joris Kuipers: but maybe I haven&amp;apos;t thought enough about what (non-)transactional processors really cause the framework to do




[12:36:09 PM] Joris Kuipers: it&amp;apos;s just a way to prevent caching the items, right?




[12:36:26 PM] Joris Kuipers: since a rollback on error won&amp;apos;t lose items for tx-al processing




[12:38:27 PM] David Syer: Right, I was mixing it up with reader-transactional




[12:38:34 PM] David Syer: So there&amp;apos;s no obvious link to retry.




[12:38:55 PM] David Syer: You could set it true if you want and if there is no retry there is no re-processing either, but it&amp;apos;s harmless.




[12:39:18 PM] Joris Kuipers: that&amp;apos;s what I thought as well, yes




[12:39:41 PM] David Syer: OK.  Mention that in the JIRA and I&amp;apos;ll remove the restriction completely.





