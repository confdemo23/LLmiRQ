Wrong custom implementation automatically detected
We have two repositories with a similar name suffix. Both repositories have a custom interface and implementation, also ending with a similar name suffix. When automatically scanning the repositories, and their custom implementation, the wrong custom implementation is wired to our repository bean. Resulting in the following exception:






Caused by: java.lang.IllegalArgumentException: No property find found for type class com.myproject.Contract




	at org.springframework.data.repository.query.parser.Property.&lt;init&gt;(Property.java:76)




	at org.springframework.data.repository.query.parser.Property.&lt;init&gt;(Property.java:97)




	at org.springframework.data.repository.query.parser.Property.create(Property.java:312)




	at org.springframework.data.repository.query.parser.Property.create(Property.java:326)




	at org.springframework.data.repository.query.parser.Property.create(Property.java:326)




	at org.springframework.data.repository.query.parser.Property.create(Property.java:326)




	at org.springframework.data.repository.query.parser.Property.create(Property.java:292)




	at org.springframework.data.repository.query.parser.Property.from(Property.java:251)




	at org.springframework.data.repository.query.parser.Property.from(Property.java:232)




	at org.springframework.data.repository.query.parser.Part.&lt;init&gt;(Part.java:48)




	at org.springframework.data.repository.query.parser.PartTree$OrPart.&lt;init&gt;(PartTree.java:242)




	at org.springframework.data.repository.query.parser.PartTree.buildTree(PartTree.java:101)




	at org.springframework.data.repository.query.parser.PartTree.&lt;init&gt;(PartTree.java:77)




	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.&lt;init&gt;(PartTreeJpaQuery.java:56)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:92)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:159)




	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:71)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.&lt;init&gt;(RepositoryFactorySupport.java:303)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:157)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:120)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:39)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)




	... 67 more






For example:
We have a repository named ContractRepository with a custom interface ContractRepositoryCustom and an implementation ContractRepositoryImpl, all defined inside the same package. In another package we have a repository, for another entity type, named AnotherContractRepository with a custom interface AnotherContractRepositoryCustom and an implementation AnotherContractRepositoryImpl. When starting the application context, the contractRepository bean is linked to our anotherContractRepositoryImpl rather than the contractRepositoryImpl.
This behavior seems to be operating system dependent, as it only occurs on our Linux CI server.
The cause of our problem can be found at AbstractRepositoryConfigDefinitionParser.detectCustomImplementation(...). It might be desirable to scan on getImplementationClassName() before applying the wildcard prefix.