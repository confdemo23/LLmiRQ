Static interface methods should not be considered query methods
I have a table with a partition key on a date, and I&amp;apos;ll mostly ever query only the last 2 days. Beyond that, the data is "dead", we only keep it for trace.
I&amp;apos;m using Java 8 in which you can set default implementation of methods in interfaces.
Here is what I&amp;apos;m trying to do:






public interface MyObjectRepository extends CassandraRepository&lt;MyObject&gt; {









    /**




     * @return the partition key dates that we consider contain "alive" data.




     */




    static String[] getAlivePartitionKeys() {




        String[] searchedPartitionKeys = new String[2];




        LocalDate currentLocalDate = LocalDateUtils.getUtcLocalDate();




        searchedPartitionKeys[0] = LocalDateUtils.format(currentLocalDate);// today




        searchedPartitionKeys[1] = LocalDateUtils.format(currentLocalDate.minus(Period.ofDays(1)));// yesterday




        return searchedPartitionKeys;




    }









    default MyObject findById(UUID id) {




        return findByPartitionKeyDateAndId(getAlivePartitionKeys(), sessionUUID);




    }









    @Query("SELECT * FROM myobject WHERE partition_key_date IN (:partitionKeyDates) AND id = :id")




    MyObject findByPartitionKeyDateAndId(@NotNull @Param("partitionKeyDates") String[] partitionKeyDates, @NotNull @Param("id") UUID id);









}






(Note: The String[] seem to not be supported with the version 1.4.5 but should be supported in 1.5.0 from what I understood, but that&amp;apos;s not the object of my request, I&amp;apos;m only trying to express the need)
Here&amp;apos;s is what I&amp;apos;d like to do from my service:






myObjectRepository.finById(uuid);






And that call will automatically look on the last 2 days. Am I trying to do something bad?
The problem is, I get the following error:






Caused by: org.springframework.dao.InvalidDataAccessApiUsageException: declarative query methods are a todo






I&amp;apos;m looking for a way to tell him I dont want any query resolution for those methods...
I thought an annotation could be used to disable it. Or we could automatically detect its a "static" or "default" method. We would then only resolve the query if:






!method.isDefault() &amp;&amp; !Modifier.isStatic(method.getModifiers())






