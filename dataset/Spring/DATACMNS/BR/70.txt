RepositoryInterfaceAwareBeanPostProcessor predicting a wrong bean type
I have two repositories











public interface UserRepository extends MongoRepository&lt;User, ObjectId&gt; {




    public User findByUsername(String username);




}














public interface FeedbackRepository extends MongoRepository&lt;Feedback, ObjectId&gt; {




    public Feedback findById(ObjectId id);




}











which I inject into a service class






@Service("myService")




public class MyService  {









    @Inject




    private FeedbackRepository feedbackRepository;









    @Inject




    private UserRepository userRepository;




    ...




}






My application fails to start throwing 
"Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [com.space.repository.mongo.FeedbackRepository]"
When I debugged further I noticed RepositoryInterfaceAwareBeanPostProcessor.predictBeanType() returning a cached bean type of UserRepository for FeedbackRepository






RepositoryInterfaceAwareBeanPostProcessor.java






public Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) {









		if (null == context || !REPOSITORY_TYPE.isAssignableFrom(beanClass)) {




			return null;




		}









		BeanDefinition definition = context.getBeanDefinition(beanName);




		PropertyValue value =




				definition.getPropertyValues().getPropertyValue(




						"repositoryInterface");




		




		if (cache.containsKey(beanClass)) {




			return cache.get(beanClass);




		}




		




		Class&lt;?&gt; resolvedBeanClass = getClassForPropertyValue(value);




		cache.put(beanClass, resolvedBeanClass);









		return resolvedBeanClass;




	}






In the above code predicting the bean type a cache is being maintained with beanClass as the key.
For all repository instances  "MongoRepositoryFactoryBean" is the bean class and hence for feedbackRepository bean predictBeanType is picking up a cached userRepository as the type.