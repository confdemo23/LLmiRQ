Spring version check in QueryExecutionConverters might fail
With the latest Gosling RC I&amp;apos;m intermittently seeing the following Exceptions on deployment. Usually a consecutive deployment will be successful.






org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;apos;entryDao&amp;apos;: Invocation of init method failed; nested exception is java.lang.ExceptionInInitializerError




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1145) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1069) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:967) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:543) ~[spring-beans-4.2.0.RELEASE.jar:na]




	... 37 common frames omitted




Caused by: java.lang.ExceptionInInitializerError: null




	at org.springframework.data.repository.core.support.QueryExecutionResultHandler.&lt;init&gt;(QueryExecutionResultHandler.java:41) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.&lt;init&gt;(RepositoryFactorySupport.java:383) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:203) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:251) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:237) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:92) ~[spring-data-jpa-1.9.0.RC1.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) ~[spring-beans-4.2.0.RELEASE.jar:na]




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) ~[spring-beans-4.2.0.RELEASE.jar:na]




	... 47 common frames omitted




Caused by: java.lang.IllegalArgumentException: [Assertion failed] - this String argument must have text; it must not be null, empty, or blank




	at org.springframework.util.Assert.hasText(Assert.java:168) ~[spring-core-4.2.0.RELEASE.jar:4.2.0.RELEASE]




	at org.springframework.util.Assert.hasText(Assert.java:181) ~[spring-core-4.2.0.RELEASE.jar:4.2.0.RELEASE]




	at org.springframework.data.util.Version.parse(Version.java:67) ~[spring-data-commons-1.11.0.RC1.jar:na]




	at org.springframework.data.repository.util.QueryExecutionConverters.&lt;clinit&gt;(QueryExecutionConverters.java:47) ~[spring-data-commons-1.11.0.RC1.jar:na]




	... 55 common frames omitted






Own analysis:
Commit in question: https://github.com/spring-projects/spring-data-commons/commit/e0dafd29f4027bd2fe40215c8a916e61bff16740
The usage of org.springframework.core.SpringVersion.getVersion() is unreliable, as already stated in the comment section of said class:






/**




 * Class that exposes the Spring version. Fetches the




 * "Implementation-Version" manifest attribute from the jar file.




 *




 * &lt;p&gt;Note that some ClassLoaders do not expose the package metadata,




 * hence this class might not be able to determine the Spring version




 * in all environments. Consider using a reflection-based check instead:




 * For example, checking for the presence of a specific Spring 2.0




 * method that you intend to call.




 *




 * @author Juergen Hoeller




 * @since 1.1




 */






The code in QueryExecutionConverters private static final Version SPRING_VERSION = Version.parse(SpringVersion.getVersion()); fails to handle null, because Version.parse() has an Assert.hasText() and can&amp;apos;t handle null.
So there are at least two obvious things to consider here: One is the not handling the null case. And the other is the reliance on SpringVersion.getVersion(), which is said to not work in all environments. Or probably in my case has timing issues.