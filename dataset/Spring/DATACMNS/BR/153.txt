OSGi issue when using a Repository that extends QueryDslPredicateExecutor (Spring Data + QueryDsl
Hi,
I am currently testing Spring Data JPA + QueryDsl in a OSGi environment (Virgo 3.0.2.RELASE + see Environnment section of the ticket). 
When declaring a JPARepository that also extends org.springframework.data.querydsl.QueryDslPredicateExecutor&lt;PortalUser&gt;, I&amp;apos;ve got the following stacktrace:






[2012-04-17 16:14:27.919] start-signalling-5           &lt;DE0006E&gt; Start failed for bundle &amp;apos;org.my-repository&amp;apos; version &amp;apos;0.0.1.BUILD-SNAPSHOT&amp;apos;. org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;apos;org.springframework.osgi.service.exporter.support.OsgiServiceFactoryBean#1&amp;apos;: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;apos;portalUserRepository&amp;apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: Did not find a query class org.my.domain.QPortalUser for domain class org.my.domain.PortalUser!




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:563)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)




	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600(AbstractDelegatedExecutionApplicationContext.java:69)




	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:355)




	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)




	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)




	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)




	at org.eclipse.virgo.kernel.agent.dm.ContextPropagatingTaskExecutor$2.run(ContextPropagatingTaskExecutor.java:95)




	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)




	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)




	at java.lang.Thread.run(Thread.java:662)




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;apos;portalUserRepository&amp;apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: Did not find a query class org.my.domain.QPortalUser for domain class org.my.domain.PortalUser!




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:149)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:102)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1429)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:245)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)




	at org.springframework.osgi.service.exporter.support.OsgiServiceFactoryBean.afterPropertiesSet(OsgiServiceFactoryBean.java:167)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)




	... 17 common frames omitted




Caused by: java.lang.IllegalArgumentException: Did not find a query class org.my.domain.QPortalUser for domain class org.my.domain.PortalUser!




	at org.springframework.data.querydsl.SimpleEntityPathResolver.createPath(SimpleEntityPathResolver.java:70)




	at org.springframework.data.jpa.repository.support.QueryDslJpaRepository.&lt;init&gt;(QueryDslJpaRepository.java:80)




	at org.springframework.data.jpa.repository.support.QueryDslJpaRepository.&lt;init&gt;(QueryDslJpaRepository.java:64)




	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:86)




	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:66)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:146)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:120)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:39)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)




	... 24 common frames omitted




Caused by: org.eclipse.virgo.kernel.osgi.framework.ExtendedClassNotFoundException: org.my.domain.QPortalUser in KernelBundleClassLoader: [bundle=org.springframework.data.commons_1.1.0.RELEASE]




	at org.eclipse.virgo.kernel.userregion.internal.equinox.KernelBundleClassLoader.loadClass(KernelBundleClassLoader.java:138)




	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)




	at org.springframework.util.ClassUtils.forName(ClassUtils.java:257)




	at org.springframework.data.querydsl.SimpleEntityPathResolver.createPath(SimpleEntityPathResolver.java:56)




	... 32 common frames omitted




Caused by: java.lang.ClassNotFoundException: org.my.domain.QPortalUser




	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:513)




	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:429)




	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:417)




	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)




	at org.eclipse.virgo.kernel.userregion.internal.equinox.KernelBundleClassLoader.loadClass(KernelBundleClassLoader.java:134)




	... 35 common frames omitted






It looks like to be an issue of classloader: in the method org.springframework.data.querydsl.SimpleEntityPathResolver.createPath(.), the classloader of the class SimpleEntityPathResolver is passed to the method ClassUtils.forName(.).






@SuppressWarnings("unchecked")




public &lt;T&gt; EntityPath&lt;T&gt; createPath(Class&lt;T&gt; domainClass) {









    String pathClassName = getQueryClassName(domainClass);




    try {




		Class&lt;?&gt; pathClass = ClassUtils.forName(pathClassName, SimpleEntityPathResolver.class.getClassLoader());




                       ...




	} catch (ClassNotFoundException e) {




		throw new IllegalArgumentException(String.format(NO_CLASS_FOUND_TEMPLATE, pathClassName, SimpleEntityPathResolver.class.getClassLoader()), e);




        }




}






To fix this issue, the classloader of the domainClass need to be used instead:






Class&lt;?&gt; pathClass = ClassUtils.forName(pathClassName, domainClass.getClassLoader());






Please, do find a patch file in attachment.
For JPA, as workaround, man can create a "copy-paste" of the class SimpleEntityPathResolver with the fix and then use a JpaRepositoryFactoryBean that creates JpaRepositoryFactory, which overrides org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(RepositoryMetadata, EntityManager) to use the new EntityPathResolver:






@Override




@SuppressWarnings({ "unchecked", "rawtypes" })




protected &lt;T, ID extends Serializable&gt; JpaRepository&lt;?, ?&gt; getTargetRepository(final RepositoryMetadata metadata,




                                                                                   final EntityManager entityManager) {









   Class&lt;?&gt; repositoryInterface = metadata.getRepositoryInterface();




   JpaEntityInformation&lt;?, Serializable&gt; entityInformation = getEntityInformation(metadata.getDomainClass());









   if (isQueryDslExecutor(repositoryInterface)) {




       return new QueryDslJpaRepository(entityInformation, entityManager, new OsgiEntityPathResolver());




   } else {




       return new SimpleJpaRepository(entityInformation, entityManager);




   }




}




    




// Also copy / paste of the parent method which is private




protected boolean isQueryDslExecutor(final Class&lt;?&gt; repositoryInterface) {




       return QUERY_DSL_PRESENT &amp;&amp; QueryDslPredicateExecutor.class.isAssignableFrom(repositoryInterface);




}






The workaround has been tested in the described environment.
Hope this helps.