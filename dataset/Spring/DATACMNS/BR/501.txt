ID type not detected for intermediate repository interface
I have a class hierarchy as follows (actual code running in Production):






abstract class Entity {}









@MappedSuperClass




abstract class RelationalEntity {}









@Entity




@Inheritance(strategy = InheritanceType.JOINED)




@Table(name = "person")




public class Person extends RelationalEntity {}









@Entity




@Table(name = "employee")




public class Employee extends Person {}









@Entity




@Table(name = "manager")




public class Manager extends Employee {}






and their corresponding Spring Data JPA repositories:






@NoRepositoryBean




public interface RelationalEntityRepository&lt;T extends RelationalEntity&gt; extends JpaRepository&lt;T, Long&gt; {}









public interface PersonRepository&lt;P extends Person&gt; extends RelationalEntityRepository&lt;P&gt; {}









public interface EmployeeRepository extends PersonRepository&lt;Employee&gt; {}









public interface ManagerRepository extends PersonRepository&lt;Manager&gt; {}






We have to sometimes run queries such as PersonRepository&lt;Person&gt;.count() because of which we have not marked that repository with NoRepositoryBean.  This arrangement is working fine in production with Spring Data JPA 1.4.3.
On attempting to upgrade to Spring Data JPA 1.5.2 we get the following exception:






Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;apos;personRepository&amp;apos;: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Could not resolve id type of interface org.example.data.PersonRepository!




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1553)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:684)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:125)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:250)




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64)




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91)




	... 25 more




Caused by: java.lang.IllegalArgumentException: Could not resolve id type of interface org.example.data.PersonRepository!




	at org.springframework.data.repository.core.support.DefaultRepositoryMetadata.resolveIdType(DefaultRepositoryMetadata.java:79)




	at org.springframework.data.repository.core.support.DefaultRepositoryMetadata.&lt;init&gt;(DefaultRepositoryMetadata.java:51)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryMetadata(RepositoryFactorySupport.java:173)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:207)




	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:84)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549)




	... 40 more






This exception is thrown from every Spring Data JPA version 1.4.4 onwards.
We have a few class hierarchies like this in our code base for which Spring Data JPA has been working well so far.  Has this kind of support been dropped from 1.4.4 onwards?
Attached is a sample project that demonstrates the problem.