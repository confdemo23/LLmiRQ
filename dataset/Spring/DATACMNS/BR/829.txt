Projecting a Map with a null value causes an exception
ProjectingMethodInterceptor.getProjection(Object, Class&lt;?&gt;) assumes the first param to be non-null, but it may be null if there is a Map with a null value, e.g. a Collections.createSingletonMap("key", null).
That means that returning such map from a @Projection, e.g.:






public interface MyProjection {




    Map&lt;String, Object&gt; getData();




}






results in an exception.
A kind of a workaround is to remove nulls from a projected map, e.g.:






public interface MyProjection {




    @Value("#{T(...).mapWithoutNulls(target.getData())}")




    Map&lt;String, Object&gt; getData();




}









...









public static &lt;K, V&gt; Map&lt;K, V&gt; mapWithoutNulls(Map&lt;K, V&gt; map) {




    return map.entrySet().stream()




            .filter(entry -&gt; entry.getValue() != null)




            .collect(Collectors.toMap(




                    Map.Entry::getKey,




                    Map.Entry::getValue));




}





