PUT/PATCH of Entity object that is a Map silently dropping elements of Map
When one has an Entity that has an attribute that is a Map, performing a PUT/PATCH to apply an update the Map will silently throw away any first-level sub-elements of the Map that are themselves a JSON object. 
For example, if I have an entity like:






@Entity




public class Person




{




    @Id




    private Long id;









     private String name;









     private HashMap&lt;String, Object&gt; attributes;




}






And I create the initial record with the following JSON using POST /api/persons:






{




    "name" : "person1",




    "attributes" : {




          "sub1" : "ok",




          "sub2" : [ "ok1", "ok2" ],




          "sub3" : [ { "childOk1" : "ok" }],




          "sub4" : {




               "c1" : "v1"




          }




     }




}






Everything works fine. If I then try to update using PATCH or PUT /api/persons/1:






{




    "attributes" : {




          "sub1" : "ok",




          "sub2" : [ "ok1", "ok2" ],




          "sub3" : [ { "childOk1" : "ok" }],




          "sub4" : {




               "c1" : "v1",




               "c2" : "new"




          }




     }




}






Not only will the attributes.sub4.c2 value not be saved, the entire attributes.sub4 element will disappear. The rest of the items, including attributes.sub3 will remain, since its value is an array of objects instead of just an object. 
If I then submit the exact same REST call, everything will return. In fact, if you just keep doing PUT or PATCH over and over, it will keep flipping back and forth from the two states.
It appears the issue is somewhere in DomainObjectReader.java, but I haven&amp;apos;t been able to fully track it down as of yet. I wanted to get this logged since I suspect this could be a major bug for people, and given that it only appears during the PATCH/PUT phase, its possible this could be missed for awhile.