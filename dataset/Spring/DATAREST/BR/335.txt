Overriding repositories delete method results in "argument type mismatch" exception
Hi,
I just tried to override the delete method in a repository and when I try to call the URL DELETE http://localhost:8080/webapp/xs/53ab96c930049cc029440d46 Spring throws an exception within AbstractRepositoryRestController line 177.
Stacktrace says:

2014-06-26 05:44:02,011 ERROR o.s.d.rest.webmvc.AbstractRepositoryRestController: 177 - argument type mismatch
java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_05]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_05]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_05]
	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_05]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:196) ~[ReflectionUtils.class:4.0.5.RELEASE]
	at org.springframework.data.rest.core.invoke.ReflectionRepositoryInvoker.invoke(ReflectionRepositoryInvoker.java:277) ~[ReflectionRepositoryInvoker.class:na]
	at org.springframework.data.rest.core.invoke.ReflectionRepositoryInvoker.invokeDelete(ReflectionRepositoryInvoker.java:210) ~[ReflectionRepositoryInvoker.class:na]
...
My code ist fairly simple:






@Document(collection="x")




public class X implements Identifiable&lt;ObjectId&gt; {




	@Id ObjectId id;




	public ObjectId getId() { return id; };




	




	String x;




	public String getX() { return x; }




	public void setX(String x) { this.x = x; }




}









@RepositoryRestResource(




		path="xs",




		collectionResourceDescription=@Description("Xs"),




		collectionResourceRel="xs",




		itemResourceDescription=@Description("X"),




		itemResourceRel="x"




		)




public interface XRepo extends MongoRepository&lt;X, ObjectId&gt;, XRepoCustom {}









public interface XRepoCustom {




	void delete(ObjectId id);




}









public class XRepoImpl implements XRepoCustom {




	@Override




	public void delete(ObjectId id) {




		System.out.println("WORKS");




	}	




}






I tried to find the underlying reason using the debugger, but after a few steps the code only consists of reflection method calling and I couldn&amp;apos;t figure out what really happens underneath.
EDIT:
I now tried the same thing with the Page&lt;X&gt; findAll(Pageable pageable) method. And it works. So it must have something to do with the delete method, I think.