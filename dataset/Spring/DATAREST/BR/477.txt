VenueProjection with List<ContactProjection> returns List<Contact> instead
I have 2 entities that are exposed by Spring Data REST: Venue and Contact. A Venue can have multiple Contacts.
I create this projections:






VenueDetails.java






@Projection(name="details", types = Venue.class)




public interface VenueDetails {




    int getId();




    String getName();




	//...




    List&lt;ContactDetails&gt; getContacts();




}












ContactDetails.java






@Projection(name="details", types = Contact.class)




public interface ContactDetails {




    int getId();




    String getContact();




    ContactType getContact_type();




}






When the client invokes http://localhost:8080/myrestservice/rest/venues/2?projection=details gets:






{




  "id" : 2,




  "name" : "A place in the desert",




  "contacts" : [ {




    "id" : 1,




    "contact" : "555 768547",




  }, {




    "id" : 2,




    "contact" : "contacts@example.org",




  }],




  "_links" : {




    "self" : {




      "href" : "http://localhost:8080/myrestservice/rest/venues/2{?projection}",




      "templated" : true




    },




    "contacts" : {




      "href" : "http://localhost:8080/myrestservice/rest/venues/2/contacts"




    }




  }




}






You see that every contact misses "contact_type".
But "contact_type" is shown when invoking http://localhost:8080/myrestservice/rest/contacts/1?projection=details:






{




  "id" : 1,




  "contact" : "555 768547",




  "contact_type" : {




    "code" : "T",




    "name" : "Telephone"




  },




  "_links" : {




    "self" : {




      "href" : "http://localhost:8080/myrestservice/rest/contacts/1{?projection}",




      "templated" : true




    },




    "contact_type" : {




      "href" : "http://localhost:8080/myrestservice/rest/contacts/1/contact_type"




    },




    "venue" : {




      "href" : "http://localhost:8080/myrestservice/rest/contacts/1/venue"




    }




  }




}






So it seems that expressing List&lt;AProjectionOfALinkedObject&gt; in a projection, ignores AProjectionOfALinkedObject and simply uses ALinkedObject.