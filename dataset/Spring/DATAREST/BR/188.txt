Spring data rest wrongly handles jpa collection attributes
Given an entity with a collection attribute






@Entity




public class MyEntity {




......




	@ElementCollection(fetch=FetchType.EAGER)




	private Set&lt;String&gt; myAttribute;




.......






when you try to create a new instance with spring data rest, it throws an exception






01:01:03.453 [qtp1456083854-24] ERROR o.s.d.r.w.AbstractRepositoryRestController - argument type mismatch




java.lang.IllegalArgumentException: argument type mismatch




        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_40]




        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_40]




        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_40]




        at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_40]




        at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:191) ~[spring-core-3.2.5.RELEASE.jar:3.2.5.RELEASE]




        at org.springframework.data.mapping.model.BeanWrapper.setProperty(BeanWrapper.java:97) ~[spring-data-commons-1.7.0.BUILD-SNAPSHOT.jar:na]




        at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ResourceDeserializer.deserialize(PersistentEntityJackson2Module.java:226) ~[




spring-data-rest-webmvc-2.0.0.BUILD-SNAPSHOT.jar:na]




        at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:2888) ~[jackson-databind-2.2.2.jar:2.2.2]




        at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2094) ~[jackson-databind-2.2.2.jar:2.2.2]




        at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readJavaType(MappingJackson2HttpMessageConverter.java:178) ~[spring-web-3




.2.5.RELEASE.jar:3.2.5.RELEASE]




        at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readInternal(MappingJackson2HttpMessageConverter.java:166) ~[spring-web-3




.2.5.RELEASE.jar:3.2.5.RELEASE]




        at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:153) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELE




ASE]




        at org.springframework.data.rest.webmvc.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgum




entResolver.java:48) ~[spring-data-rest-webmvc-2.0.0.BUILD-SNAPSHOT.jar:na]




        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[sprin




g-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]




        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) ~[spring-web-3.2.5.RELEASE.jar




:3.2.5.RELEASE]




        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:123) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.




RELEASE]




        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-




webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]




        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) ~[spring




-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]




        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) ~[spring-web






I think the problem is with PersistentEntityJackson2Module#deserialize where the collections are handled






if (Collection.class.isAssignableFrom(ctype)) {




	c = new ArrayList&lt;Object&gt;();




} else if (Set.class.isAssignableFrom(ctype)) {




	c = new HashSet&lt;Object&gt;();




}





 and it should be 






if (Set.class.isAssignableFrom(ctype)) {




	c = new HashSet&lt;Object&gt;();




} else if (Collection.class.isAssignableFrom(ctype)) {




	c = new ArrayList&lt;Object&gt;();




}





 or the first branch should consider List.class instead of Collection.class