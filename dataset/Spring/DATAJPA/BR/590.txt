@Version implementation changes from 1.6.0 to 1.6.2 is a breaking change that doesn&apos;t make much sense
isNew is implemented incorrectly in &gt; 1.6.0...






JpaMetamodelEntityInformation.isNew() in 1.6.0






    @Override




    public boolean isNew(T entity) {




        




        if (versionAttribute == null) {




        	return super.isNew(entity);




        }




        




        return new DirectFieldAccessFallbackBeanWrapper(entity).getPropertyValue(versionAttribute.getName()) == null;




    }






This is to me a correct implementation that specifies an entity is &amp;apos;new&amp;apos; when there is no Version populated.






JpaMetamodelEntityInformation.isNew() in 1.6.2











	@Override




	public boolean isNew(T entity) {









		if (versionAttribute == null || versionAttribute.getJavaType().isPrimitive()) {




			return super.isNew(entity);




		}









		BeanWrapper wrapper = new DirectFieldAccessFallbackBeanWrapper(entity);




		Object versionValue = wrapper.getPropertyValue(versionAttribute.getName());









		if (versionValue == null) {




			return true;




		}









		return ((Number) versionValue).longValue() == 0;




	}






You can see that the latest code now expects the version to be non-zero. Hibernate by default inserts a 0 for newly created objects, it seems strange to make everyone default to 1 for versioning.. it seems even stranger to do it in a patch/minor release.