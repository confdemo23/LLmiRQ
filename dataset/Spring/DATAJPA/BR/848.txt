AbstractPersistable.equals() always returns false if target entity is a proxy
I found a problem with org.springframework.data.jpa.domain.AbstractPersistable class equals method implementation.
It always return false if target entity for comparison is javassist proxy which hibernate returns for example if you do entityRepository.getOne(123) instead of findOne.
The problem is with line






if (!getClass().equals(obj.getClass())) {






The obj.getClass returns something like Employee_$$_jvst860_de while this already deproxyfied and has class Employee. So this two classes of course not equal.
I think we can do instead this:






if (!getClass().isInstance(obj)) {






Or this:






Class&lt;?&gt; otherClass = HibernateProxyHelper.getClassWithoutInitializingProxy(obj);




if (!getClass().equals(otherClass)) {






The second variant is more "right" because it excludes subclasses but using HibernateProxyHelper in AbstractPersistable is bad idea I think.
The first variant works but can&amp;apos;t guarantee that obj is same class as this and not subclass (other than proxy). But I think even this is better then just return false for the same entity.
Simple code to reproduce this bug:






Employee e1 = employeeRepository.getOne(15);




Employee e2 = employeeRepository.getOne(15);




System.out.println(e1.getClass()); // Employee_$$_jvst860_de




System.out.println(e2.getClass()); // Employee_$$_jvst860_de




// The classes equal here but inside e1.equals method e1&amp;apos;s &amp;apos;this&amp;apos; has class Employee (not proxy)




System.out.println(e1.equals(e2)); // false










