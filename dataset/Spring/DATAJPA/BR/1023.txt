Reject stream executions if not executed within transaction 
I&amp;apos;m using Stream&amp;apos;s to loop through each element in a Repository in an @Scheduled method. After running 200 times I get the following error:






2016-12-13 09:40:39.159  WARN 51004 --- [pool-2-thread-1] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 0, SQLState: null




2016-12-13 09:40:39.159 ERROR 51004 --- [pool-2-thread-1] o.h.engine.jdbc.spi.SqlExceptionHelper   : [pool-2-thread-1] Timeout: Pool empty. Unable to fetch a connection in 2 seconds, none available[size:200; busy:200; idle:0; lastwait:2000].






The Repository is defined as such:






public interface PushNotificationRepository extends JpaRepository&lt;PushNotification, Long&gt; {




    @Query(value = "select p from PushNotification p")




    Stream&lt;PushNotification&gt; findAllAndStream();




}






The Service is defined like this:






@Service




@Transactional()




public class PushNotificationFlusherService {




    private static final Logger LOGGER = LoggerFactory.getLogger(PushNotificationFlusherService.class);









    private final PushNotificationRepository pushNotificationRepository;









    @Autowired




    public PushNotificationFlusherService(PushNotificationRepository pushNotificationRepository) {




        this.pushNotificationRepository = pushNotificationRepository;




    }









    @Scheduled(fixedDelay = 5000)




    protected void flushPushNotificationQueue() {




        LOGGER.info("Flushing push notifications");









        try (Stream&lt;PushNotification&gt; pushNotifications = pushNotificationRepository.findAllAndStream()) {




            pushNotifications.forEach((PushNotification pushNotification) -&gt; {




               // Send notification 




            });




        }









        LOGGER.info("Flushed push notifications");




    }






I&amp;apos;ve tried using @Transactional( readOnly=true) but it does not make a difference.