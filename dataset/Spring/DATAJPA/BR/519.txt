ClasspathScanningPersistenceUnitPostProcessor throws NPE
My web app has heterogenous DB support, and imports 3 jars each with its own Mongo, JPA MySQL, and JPA Postgres support. The datasource is chosen at runtime via conditional configuration loading.
I have to setup my web app to load DB-specific orm.xml files using intra-jar class loading. For example, my Postgres config looks like this:






Class&lt;?&gt; klass = com.acme.postgres.Placeholder.class;




ClasspathScanningPersistenceUnitPostProcessor processor = new ClasspathScanningPersistenceUnitPostProcessor(klass.getPackage().getName());




processor.setResourceLoader(new DefaultResourceLoader(klass.getClassLoader()));




processor.setMappingFileNamePattern("**/orm.xml");




entityManagerFactoryBean.setPersistenceUnitPostProcessors(processor);






The orm.xml file is located successfully within one of the WEB-INF/lib jars:






09:06:50 web.1  | 706  [localhost-startStop-1] DEBUG PathMatchingResourcePatternResolver  - Resolved location pattern [classpath*:com/acme/postgres/**/*orm.xml] to resources [URL [jar:file:/Users/me/workspaces/feature-springdata/MyServer/target/tomcat.5000/work/Tomcat/localhost/_/WEB-INF/lib/MyPostgresSupport-0.0.1-SNAPSHOT.jar!/com/acme/postgres/orm.xml]]






But then a traversal of resources throws a NPE:






09:06:50 web.1  | Caused by: java.lang.NullPointerException




09:06:50 web.1  | 	at org.springframework.data.jpa.support.ClasspathScanningPersistenceUnitPostProcessor.scanForMappingFileLocations(ClasspathScanningPersistenceUnitPostProcessor.java:146)




09:06:50 web.1  | 	at org.springframework.data.jpa.support.ClasspathScanningPersistenceUnitPostProcessor.postProcessPersistenceUnitInfo(ClasspathScanningPersistenceUnitPostProcessor.java:103)






The suspicious code is this:






for (Resource resource : scannedResources) {




   try {




      String resourcePath = resource.getURI().getPath();




      String resourcePathInClasspath = resourcePath.substring(resourcePath.indexOf(basePackagePathComponent));




      




  }




}






In the above code, resourcePath is null. And the resource.getURI() is:






jar:file:/Users/me/workspaces/feature-springdata/MyServer/target/tomcat.5000/work/Tomcat/localhost/_/WEB-INF/lib/MyPostgresSupport-0.0.1-SNAPSHOT.jar!/com/acme/postgres/orm.xml





