Parameter binding detection for in clause broken for parameters surrounded with parentheses
The following code was working happily in 1.5.0.M1 and 1.5.0.RC1 however when I upgraded to 1.5.0.RELEASE it produced an exception.






    @Query("select count(we) from MyEntity we where we.status in (:statuses)")




    Long countByStatus(@Param("statuses") Status... statuses);






And the exception produced ...






Caused by: java.lang.IllegalArgumentException: Encountered array-valued parameter binding, but was expecting [mymaskedpackage.Status (n/a)]




        at org.hibernate.jpa.spi.BaseQueryImpl.validateArrayValuedParameterBinding(BaseQueryImpl.java:925)




        at org.hibernate.jpa.spi.BaseQueryImpl.validateBinding(BaseQueryImpl.java:881)




        at org.hibernate.jpa.internal.QueryImpl.access$000(QueryImpl.java:80)




        at org.hibernate.jpa.internal.QueryImpl$ParameterRegistrationImpl.bindValue(QueryImpl.java:248)




        at org.hibernate.jpa.spi.BaseQueryImpl.setParameter(BaseQueryImpl.java:631)




        at org.hibernate.jpa.spi.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:179)




        at org.hibernate.jpa.spi.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:49)




        at org.springframework.data.jpa.repository.query.ParameterBinder.bind(ParameterBinder.java:131)




        at org.springframework.data.jpa.repository.query.StringQueryParameterBinder.bind(StringQueryParameterBinder.java:61)




        at org.springframework.data.jpa.repository.query.ParameterBinder.bind(ParameterBinder.java:110)




        at org.springframework.data.jpa.repository.query.ParameterBinder.bindAndPrepare(ParameterBinder.java:153)




        at org.springframework.data.jpa.repository.query.ParameterBinder.bindAndPrepare(ParameterBinder.java:144)




        at org.springframework.data.jpa.repository.query.AbstractStringBasedJpaQuery.doCreateQuery(AbstractStringBasedJpaQuery.java:68)




        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.createQuery(AbstractJpaQuery.java:145)




        at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:142)




        at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:61)




        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:96)




        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:86)




        at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:337)




        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




        at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)




        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)




        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)




        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)




        at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)






The code making the call was simply doing:






myRepository.countByStatus(Status.OK)






Perhaps this has been introduced as part of this update: DATAJPA-461 ?