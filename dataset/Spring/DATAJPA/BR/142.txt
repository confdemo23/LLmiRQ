Invalid count query generated when using Pageable and NamedQuery with existing order by
Taking:






@NamedQuery(name = "Test.findQuery", query = "from Test te where te.name like ?1 order by te.name desc")






And executing using:






repository.findQuery(name, new PageRequest(0, 5));






Results in:






org.springframework.orm.hibernate3.HibernateJdbcException: 




JDBC exception on Hibernate data access: 




SQLException for SQL [select count(test0_.id) as col_0_0_ from test test0_ where test0_.name=? order by test0_.name desc]; 




SQL state [null]; 




error code [0]; could not execute query; 




nested exception is org.hibernate.exception.GenericJDBCException: could not execute query...






I&amp;apos;m in 2 minds whether this is actually "correct" behaviour and whether there can be a more friendly/elegant way of warning or erroring out upfront if pageable requests are made on a named query with ordering etc. or whether the count query should be amended to exclude the order by (though there are probably a myriad of edge case scenarios that would then need to be catered for.)
Or is it just a case of &amp;apos;caveat emptor&amp;apos; when mapping to a named query and using pageable finders? I&amp;apos;d hope there was some middle ground!