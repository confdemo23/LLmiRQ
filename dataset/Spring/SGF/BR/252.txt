Spring GemFire&apos;s Repository extension does not properly handle multiple, identically named Subregions for persisting corresponding application domain objects associated by way of the @Region annotation.
When an application defines 2 or more different application domain objects, for instance...






@Region("Users")




public class AdminUser extends User {




  ...




}









@Region("Users")




public class GuestUser extends User {




  ...




}






Where each domain object is stored in multiple different, but identically named Subregions in GemFire, where the SDG XML namespace-based configuration meta-data might look like the following...






&lt;gfe:replicated-region id="Local" persistent="false"&gt;




  &lt;gfe:replicated-region name="Admin" persistent="false"&gt;




    &lt;gfe:replicated-region name="Users" persistent="false"/&gt;




  &lt;/gfe:replicated-region&gt;




  &lt;gfe:replicated-region name="Guest" persistent="false"&gt;




    &lt;gfe:replicated-region name="Users" persistent="false"/&gt;




  &lt;/gfe:replicated-region&gt;




&lt;/gfe:replicated-region&gt;






Then Spring Data GemFire&amp;apos;s Repository extension support infrastructure fails to properly associate the corresponding application domain object to the appropriate Subregion, i.e. ...
AdminUser to /Local/Admin/Users
and...
GuestUser to /Local/Guest/Users