A Cache (Region) created using Spring configuration with persistent PDX keys fails to start.
Using Spring GemFire&amp;apos;s XML namespace to create and configure a Cache containing a persistent Region with PDX keys fails to start with a PdxInitializationException (shown below).
From Tim...

The Region tries to deserialize the PDX key before the PDX disk store containing the type meta-data has been created. I can get this same exception using the GemFire API if I create the disk stores in the wrong order (data disk store first, then PDX disk store). It works fine using cache.xml since the PDX disk store is always created first (in CacheCreation.create).
Steps to reproduce:
1. Using PDX with persistence.
2. Dedicated disk store for PDX.
3. Starts fine with empty directory.
4. Kill JVM
5. Next time the server is started I get this error.
If I delete all the persistence files the server will start fine.
The stack trace on startup is...







Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;apos;diskStore&amp;apos;: Invocation of init method failed; nested exception is com.gemstone.gemfire.pdx.PdxInitializationException: PDX registry could not be initialized because the disk store pdxDiskStore was not created.




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1482)




  ...




	at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:83)




	at com.gopivotal.gemfire.pdx.test.TestSpring.main(TestSpring.java:16)




Caused by: com.gemstone.gemfire.pdx.PdxInitializationException: PDX registry could not be initialized because the disk store pdxDiskStore was not created.




	at com.gemstone.gemfire.pdx.internal.PeerTypeRegistration.getIdToType(PeerTypeRegistration.java:126)




	at com.gemstone.gemfire.pdx.internal.PeerTypeRegistration.suspendTX(PeerTypeRegistration.java:596)




	at com.gemstone.gemfire.pdx.internal.PeerTypeRegistration.getType(PeerTypeRegistration.java:400)




	at com.gemstone.gemfire.pdx.internal.TypeRegistry.getType(TypeRegistry.java:114)




	at com.gemstone.gemfire.internal.InternalDataSerializer.readPdxSerializable(InternalDataSerializer.java:2971)




	at com.gemstone.gemfire.internal.InternalDataSerializer.basicReadObject(InternalDataSerializer.java:2793)




	at com.gemstone.gemfire.DataSerializer.readObject(DataSerializer.java:3212)




	at com.gemstone.gemfire.internal.util.BlobHelper.deserializeBlob(BlobHelper.java:81)




	at com.gemstone.gemfire.internal.cache.EntryEventImpl.deserialize(EntryEventImpl.java:1388)




	at com.gemstone.gemfire.internal.cache.Oplog.deserializeKey(Oplog.java:7461)




	at com.gemstone.gemfire.internal.cache.Oplog.readKrf(Oplog.java:1779)




	at com.gemstone.gemfire.internal.cache.Oplog.recoverCrf(Oplog.java:2200)




	at com.gemstone.gemfire.internal.cache.DiskStoreImpl.recoverRegionsThatAreReady(DiskStoreImpl.java:2348)




	at com.gemstone.gemfire.internal.cache.DiskStoreImpl.initializeIfNeeded(DiskStoreImpl.java:2271)




	at com.gemstone.gemfire.internal.cache.DiskStoreImpl.doInitialRecovery(DiskStoreImpl.java:2275)




	at com.gemstone.gemfire.internal.cache.DiskStoreFactoryImpl.create(DiskStoreFactoryImpl.java:129)




	at org.springframework.data.gemfire.DiskStoreFactoryBean.afterPropertiesSet(DiskStoreFactoryBean.java:115)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1541)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1479)





