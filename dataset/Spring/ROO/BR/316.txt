DataOnDemand ITD references non-existing abstract class if the corresponding member is @NotNull
the following roo script






 




project --topLevelPackage tld.domain.project --java 6 --projectName icc_roo2









persistence setup --database HYPERSONIC_IN_MEMORY --provider HIBERNATE














entity --abstract --name ~.model.AbstractEntity









entity --name ~.model.ConcreteEntity --testAutomatically




field reference --fieldName reference --type ~.model.AbstractEntity --notNull yes






produces the entity






@Entity




@RooJavaBean




@RooToString




@RooEntity




public class ConcreteEntity {









    @NotNull




    @ManyToOne(targetEntity = AbstractEntity.class)




    @JoinColumn




    private AbstractEntity reference;




}






and the following DataOnDemand ITD






privileged aspect ConcreteEntityDataOnDemand_Roo_DataOnDemand {




[...]




    @Autowired    




    private AbstractEntityDataOnDemand ConcreteEntityDataOnDemand.abstractEntityDataOnDemand;    




[...]






Unfortunately AbstractEntityDataOnDemand does not exist. 
And it can not be created because --testAutomatically is not allowed for abstract classes.
The reference to abstractEntityDataOnDemand is only included if the corresponding class member is marked as @NotNull.