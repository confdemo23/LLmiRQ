DataOnDemand.init() no longer checks if data already created
I noticed that the init() method in the integration test generated DataOnDemand classes changed in RC1 from M3. It no longer checks to see if the test set has already been created. Becuase the getRandomXXX() method always calls init(), whenever getRandomXXX() is called, the test set is created again.
For example, with the clinic.roo example, the Visit entity has a relationship with Pet. In the VisitDataOnDemand.getNewTransientVisit() entity, it gets a Pet instance by calling PetDataOnDemand.getRandomPet(). Thus every time VisitDataOnDemand.getNewTransientVisit() is called, 10 Pet entities are created in PetDataOnDemand.init().
If Pet were to have a unique constraints (e.g. the description field), then the call to init() will fail with a constraint violation as the description will be repeated in the second set creation. This is what is happening with my application as I&amp;apos;m using a unique constraint.
RC1 code (no check):
    public void PetDataOnDemand.init() {
        data = new java.util.ArrayList&lt;com.springsource.petclinic.domain.Pet&gt;();
        for (int i = 0; i &lt; 10; i++) 
{
            com.springsource.petclinic.domain.Pet obj = getNewTransientPet(i);
            obj.persist();
            data.add(obj);
        }
    }

M3 code:
    public void PetDataOnDemand.init() {
        if (data != null &amp;&amp; !data.isEmpty()) {
            return;
        }

        data = com.springsource.petclinic.domain.Pet.findPetEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for &amp;apos;Pet&amp;apos; illegally returned null");
        if (!data.isEmpty()) {            return;        }

        data = new java.util.ArrayList&lt;com.springsource.petclinic.domain.Pet&gt;();
        for (int i = 0; i &lt; 10; i++) {            com.springsource.petclinic.domain.Pet obj = getNewTransientPet(i);            obj.persist();            data.add(obj);        }
    }