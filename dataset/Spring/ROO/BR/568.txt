DataOnDemand for OneToOne relationships should be more robust
This bug is closely related to the linked issues about @OneToOne (cyclic toString() bug and "field reference" imrpovement).
Generated tests for "reference" relationships pick random target entity when feeding the reference.
This is fine for @ManyToOne relationships, but wrong for @OneToOne : randomisation will return several time same target entity.
So DataOnDemand should pick random target entity out of remaining ones when relationship is @OneToOne.
Here is a minimal script to reproduce, along with a little manual editing :
project --topLevelPackage fr.free.hd.ch4mp.onetoone
persistence setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY
entity --class ~.domain.Person --testAutomatically
entity --class ~.domain.DrivingLicense --testAutomatically
field string firstName --notNull --class ~.domain.Person
field string lastName --notNull --class ~.domain.Person
field number --fieldName points --type java.lang.Integer --notNull --min 0 --max 12 --class ~.domain.DrivingLicense
controller all --package ~.web
DrivingLicense.java editing :
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
...
    @NotNull
    @OneToOne(targetEntity = Person.class)
    @JoinColumn
    private Person owner;
Person.java editing :
import javax.persistence.CascadeType;
import javax.persistence.OneToOne;
...
    @OneToOne(targetEntity = DrivingLicense.class, cascade = CascadeType.ALL, mappedBy = "owner")
    private DrivingLicense drivingLicense;
perform test should fail.
Editing DrivingLicenseDataOnDemand_Roo_DataOnDemand.aj and changing personDataOnDemand.getRandomPerson() call to Person.findPerson(new Long(index)) would be sufficient for tests to pass.