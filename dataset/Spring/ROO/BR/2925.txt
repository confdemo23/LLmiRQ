GWT Request interface not updated when invoked service is deleted
To replicate:

Create a GWT project in which the service layer delegates to active record methods:






project --topLevelPackage com.example.gwtbug




jpa setup --database HYPERSONIC_IN_MEMORY --provider HIBERNATE




entity jpa --class ~.server.domain.Thing




field string --fieldName name




service --interface ~.services.ThingService --entity ~.server.domain.Thing




web gwt setup




web gwt all --proxyPackage ~.client.proxy --requestPackage ~.client.request






Exit the Roo shell
Delete ThingService.java and ThingServiceImpl.java
Restart the Roo shell; some GWT-related artifacts are updated to reflect the deletion of the ThingService, but the Roo-managed ThingRequest interface still contains its class name and method signatures:






package com.example.gwtbug.client.request;









import com.example.gwtbug.client.proxy.ThingProxy;




import com.google.web.bindery.requestfactory.shared.InstanceRequest;




import com.google.web.bindery.requestfactory.shared.Request;




import com.google.web.bindery.requestfactory.shared.RequestContext;




import com.google.web.bindery.requestfactory.shared.ServiceName;




import org.springframework.roo.addon.gwt.RooGwtRequest;









@RooGwtRequest(value = "com.example.gwtbug.server.domain.Thing", exclude = { "clear", "entityManager", "equals", "flush", "hashCode", "merge", "toString" })




@ServiceName(value = "com.example.gwtbug.services.ThingService", locator = "com.example.gwtbug.server.locator.GwtServiceLocator")




public interface ThingRequest extends RequestContext {









    abstract Request&lt;java.lang.Long&gt; countAllThings();









    abstract Request&lt;java.lang.Void&gt; deleteThing(ThingProxy thing);









    abstract Request&lt;com.example.gwtbug.client.proxy.ThingProxy&gt; findThing(Long id);









    abstract Request&lt;java.util.List&lt;com.example.gwtbug.client.proxy.ThingProxy&gt;&gt; findAllThings();









    abstract Request&lt;java.util.List&lt;com.example.gwtbug.client.proxy.ThingProxy&gt;&gt; findThingEntries(int firstResult, int maxResults);









    abstract Request&lt;java.lang.Void&gt; saveThing(ThingProxy thing);









    abstract Request&lt;com.example.gwtbug.client.proxy.ThingProxy&gt; updateThing(ThingProxy thing);




}






The most obvious symptom is that the following Roo-managed Java files no longer compile (because they have been correctly updated with the expected Request method names):
	
ThingActivitiesMapper_Roo_Gwt.java
ThingDetailsActivity_Roo_Gwt.java
ThingListActivity_Roo_Gwt.java



