MavenProjectMetadataProvider&apos;s plugin removal methods use inappropriate criteria
A plugin&amp;apos;s core identity is its groupId and artifactId. For example, when people talk about the JUnit plugin, they mean groupId = "org.apache.maven.plugins" and artifactId = "maven-surefire-plugin". In addition to this core identity, a POM using this plugin will usually specify the plugin&amp;apos;s version, and possibly other details such as configuration and executions.
There are two methods in MavenProjectMetadataProvider for removing plugins from the generated project&amp;apos;s POM; both of which have problems:

#removeBuildPlugins(List&lt;Plugin&gt;) matches on artifactId and version, i.e. ignores groupId. This means that some unrelated plugin could be accidentally removed if it happened to share its artifactId and version with one that was intended to be removed.
#removeBuildPlugin(Plugin) will remove any plugins that are "equal" to the given one, according to the result of calling Plugin#equals(), which correctly checks groupId and artifactId but wrongly checks version and (if it exists in both Plugins) the configuration. So to remove a plugin using this method, you have to provide a Plugin instance that exactly matches the one in the POM, right down to the details of its configuration.

Based on how these methods are currently used, they should both be changed to remove any plugins that match the groupId and artifactId of the given one(s).