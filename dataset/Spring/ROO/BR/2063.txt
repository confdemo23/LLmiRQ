field of Abstract type in class covered by Roo Integration Tests causes invalid DataOnDemand.aj
Here is script to reproduce
project --topLevelPackage com.dod
persistence setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY 
entity --class Base --abstract
field string --fieldName blah
// [failed] test integration --entity ~.Base 
// ^ This is an expected result, can&amp;apos;t create an integration test for an abstract entity.
entity --class ~.Suspect
field reference --type ~.Base --fieldName base
test integration --entity ~.Suspect
// ^ Integration test is created fine, but it won&amp;apos;t compile.  Having a field on an entity that is an 
// abstract class is perfectly legal.
perform tests
Result:
[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.0:test-compile (default) on project dod: Compiler errors :
[ERROR] error at import com.dod.BaseDataOnDemand;
[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^
[ERROR] C:\springsource\workspace-sts-2.5.0.RELEASE\dodtest\src\test\java\com\dod\SuspectDataOnDemand_Roo_DataOnDemand.aj:6:0::0 The import
com.dod.BaseDataOnDemand cannot be resolved
[ERROR] error at private BaseDataOnDemand SuspectDataOnDemand.baseDataOnDemand;
[ERROR] ^^^^^^^^^^^
[ERROR] C:\springsource\workspace-sts-2.5.0.RELEASE\dodtest\src\test\java\com\dod\SuspectDataOnDemand_Roo_DataOnDemand.aj:22:0::0 BaseDataOn
Demand cannot be resolved to a type
[ERROR] error at obj.setBase(baseDataOnDemand.getRandomBase());
[ERROR] ^^^^^^^
[ERROR] C:\springsource\workspace-sts-2.5.0.RELEASE\dodtest\src\test\java\com\dod\SuspectDataOnDemand_Roo_DataOnDemand.aj:26:0::0 baseDataOn
Demand cannot be resolved
The SuspectDataOnDemand_Roo_DataOnDemand class has been created with this line:
 @Autowired
    private BaseDataOnDemand SuspectDataOnDemand.baseDataOnDemand;
but since Base.java is an abstract class, it isn&amp;apos;t a canditate for test integration, and there is no BaseDataOnDemand.java.
Not sure if this is by design, but I can&amp;apos;t see any reason why a BaseDataOnDemand shouldn&amp;apos;t be created, after all Base.java has a field that needs a value for testing purposes, even if Base itself can&amp;apos;t be tested in isolation