I/O resources can be left open
Closeable I/O resources are not being closed in all cases, which could lead to resource shortages, e.g. running out of file handles. For example, the following Roo code will not attempt to close the "is" resource if the call to br.close() throws an exception:






try {




    br.close();




    is.close();




} catch (Exception ignored) {}






We need a utility method similar to Apache Commons&amp;apos; IOUtils#closeQuietly(java.io.Closeable) that accepts null inputs and eats any IOException arising from calling Closeable#close(). 