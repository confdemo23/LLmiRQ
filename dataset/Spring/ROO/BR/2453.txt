json add ignores --disallowedOperations flag on the controller
If you specify you want to disallow some of the crud operations like update,create or delete on the controller and if you also specify you would like to add the roo managed json annotation to the object, the json add roo shell command will ignore the disallowed operations and instead create all the crud operations.
Ex:
entity --class ~.domain.PolicySignature 
field string --fieldName policy
field string --fieldName signature
field string --fieldName awskeyid
controller scaffold --class ~.web.PolicySignatureService --entity ~.domain.PolicySignature --disallowedOperations update,create,delete
json add
Then the resulting PolicySignatureService_Roo_Controller.aj file will have the correct html content type show and list requestmappings but if you set your content type to json you can bypass the restrictions and also put post and delete which I don&amp;apos;t think should happen.
Also if you manually try to delete these disallowed operations the roo shell replaces them in the aspect J file. 
This is what the aspect J file looks like, you&amp;apos;ll notice you have many more operations with content type set to json than you do with the regular content type:
privileged aspect PolicySignatureService_Roo_Controller {
    @RequestMapping(value = "/
{id}", method = RequestMethod.GET)
    /* ... */

    @RequestMapping(method = RequestMethod.GET)
    /* ... */

    @ModelAttribute("policysignatures")
       /* ... */

    @RequestMapping(value = "/{id}
", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
       /* ... */
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
      /* ... */
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
       /* ... */
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
       /* ... */
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
      /* ... */
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
       /* ... */
    @RequestMapping(value = "/
{id}
", method = RequestMethod.DELETE, headers = "Accept=application/json")
       /* ... */
}
