High CPU usage for 5 mins during startup
When I launch Roo in my project folder it eats CPU for ~5 mins, using 200% of CPU for approx half of that time, then dropping to 100% for the remainder of that time.
It&amp;apos;s bogging down Eclipse/STS, although I get identical problems running Roo at a command prompt.
My project has ~50 entities (all scaffolded) and I have another 80 or so classes elsewhere in the project. Not a trivial amount, but not huge either. I&amp;apos;ve currently got no generated tests in the project, because then Roo takes even longer to start up. 
Don&amp;apos;t know if it makes any difference, but my project also has some GWT components in it, because I&amp;apos;m also using Vaadin libs.
I&amp;apos;m using Oracle&amp;apos;s JRockit VM - but I am experiencing these delays no matter what VM I choose.
I have tried different settings for -Xms and -Xmx, but that made no noticeable difference.
Here&amp;apos;s some diagnostic info:-
localhost$ time roo metadata status
    ____  ____  ____  
   / __ \/ __ \/ __ \ 
  / /_/ / / / / / / / 
 / , _/ // / /_/ /  
// ||___/___/    1.1.0.RELEASE [rev 793f2b0]
Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.
Notification count: 934
375: org.springframework.roo.process.manager.internal.DefaultFileManager
1116: org.springframework.roo.addon.configurable.ConfigurableMetadata
1308: org.springframework.roo.addon.javabean.JavaBeanMetadata
1727: org.springframework.roo.classpath.PhysicalTypeIdentifier
2336: org.springframework.roo.addon.entity.EntityMetadata
2703: org.springframework.roo.addon.tostring.ToStringMetadata
5674: org.springframework.roo.project.AutomaticProjectUpgradeService
5850: org.springframework.roo.addon.web.mvc.controller.WebScaffoldMetadata
6065: org.springframework.roo.addon.finder.FinderMetadata
7463: org.springframework.roo.addon.beaninfo.BeanInfoMetadata
7785: org.springframework.roo.addon.plural.PluralMetadata
194309: org.springframework.roo.addon.web.mvc.jsp.JspMetadata
[DefaultMetadataService@12c42222 providers = set[org.springframework.roo.addon.beaninfo.BeanInfoMetadataProviderImpl@13495a6e, org.springframework.roo.addon.configurable.ConfigurableMetadataProviderImpl@1348f42b, org.springframework.roo.addon.dbre.DbreMetadataProviderImpl@1368e98e, org.springframework.roo.addon.dod.DataOnDemandMetadataProvider@134d8930, org.springframework.roo.addon.entity.EntityMetadataProviderImpl@134728a8, org.springframework.roo.addon.entity.IdentifierMetadataProviderImpl@13463ad3, org.springframework.roo.addon.finder.FinderMetadataProvider@13480919, org.springframework.roo.addon.gwt.GwtMetadataProvider@137bdb57, org.springframework.roo.addon.javabean.JavaBeanMetadataProvider@1345ac0f, org.springframework.roo.addon.json.JsonMetadataProvider@13400761, org.springframework.roo.addon.maven.MavenProjectMetadataProvider@136caadc, org.springframework.roo.addon.plural.PluralMetadataProviderImpl@133eeffa, org.springframework.roo.addon.property.editor.EditorMetadataProvider@133e82dd, org.springframework.roo.addon.serializable.SerializableMetadataProviderImpl@133df772, org.springframework.roo.addon.solr.SolrJspMetadataListener@1344b69a, org.springframework.roo.addon.solr.SolrMetadataProvider@134ed00b, org.springframework.roo.addon.solr.SolrWebSearchMetadataProvider@12c64069, org.springframework.roo.addon.test.IntegrationTestMetadataProvider@134455a7, org.springframework.roo.addon.tostring.ToStringMetadataProvider@1344435b, org.springframework.roo.addon.web.mvc.controller.WebScaffoldMetadataProviderImpl@1374c356, org.springframework.roo.addon.web.mvc.jsp.JspMetadataListener@12cc9a0e, org.springframework.roo.classpath.javaparser.JavaParserMetadataProvider@1343a38c], validGets = 104625, recursiveGets = 1170, cachePuts = 2258, cacheHits = 48489, cacheMisses = 56136, cacheEvictions = 55002, cacheCurrentSize = 694, cacheMaximumSize = 100000]
Roo exited with code 0
real	4m11.758s
user	5m16.356s
sys	1m29.106s
localhost$
I have a bunch of jstack traces also: I&amp;apos;ve taken a selection of samples during this high CPU startup period. I&amp;apos;ll attach a zip containing 5 traces from the early startup phase (when CPU is 200%), and 5 from the later phase (when CPU is 100%).
If you want stack traces on a different VM, or any other info, let me know. 
Thanks,
Jim