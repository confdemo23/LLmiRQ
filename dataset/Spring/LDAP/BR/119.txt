modifyAttributes produces invalid SchemaViolationException in a particular use case
This is most likely not related to any environment, but I have found the following issue with modifyAttributes:
Use case is a basic user/role relationship where we want to update the list of users that have been assigned to a role. A role has the following structure in our system, where values in &lt;angle brackets&gt; are variable:
objectClass: groupOfUniqueNames
objectClass: top
cn: &lt;ROLE_NAME&gt;
uniqueMember: &lt;DN of a user&gt;
uniqueMember: &lt;optional DN of another user&gt;
...
description: &lt;optional description&gt;
Since a groupOfUniqueNames must have at least one uniqueMember, the following use case pseudo code fails for us:
1) retrieve an existing role using the role DN
2) convert to a role domain object using a context mapper
3) update the list of uniqueMember (users) to a completely different set of users from the original using DirContextOperations.setAttributeValues("uniqueMember", newMembers)
4) call ldapTemplate.modifyAttributes
5) watch a completely (now explainable) bogus SchemaViolationException get thrown
The problem is that (I believe) the spring-ldap code deletes all the uniqueMember entries before adding the new ones, so the SchemaViolationException is thrown because you can&amp;apos;t have zero uniqueMembers.
Note: the SchemaViolationException is not thrown when at least one of the new users is the same as one that already exists for the role.
What (I believe) needs to happen is that more logic needs to be applied under the covers when the multi-attribute being modified is a required attribute, such that the zero value condition is not reached. A suggested approach might be to do set compares (old values vs new values) and add new (non-existing) ones first, then delete obsolete (existing, but not in new set) attribute values.