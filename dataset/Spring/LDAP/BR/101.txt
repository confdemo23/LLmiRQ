allow eager invalidation of dirty (pooled) connections
If a search fails due to a connection fault, the connection should be assumed invalid. In the pooling context source implementation (single context models are similarly affected) if a connection fails it should be removed from the pool. Under current behaviour, this is only possible through validation on borrow and return, which are a certain performance hit. Worse, if the pool is heavily loaded, even with test-on-idle semantics a dirty connection may never be removed from the pool, just reused by many pool clients.
Suggested solution: mark on the context that it has failed, as early as possible. For example, in the LdapTemplate#search NamingException catch block (line 295 in v1.2.1). Could be implemented using a mixin interface, for example FailureAwareDirContext. If the exception was a non-transient one (e.g. CommunicationException rather than SizeLimitExceededException) then mark on the context that it has failed. When it is returned to the pool (e.g. in DelegatingContext#close or PoolingContextSource#returnObject) check if the DirContext implements this interface, check its status and invalidate it if necessary.
This solution will not provide retry for clients of the pool, but will at least prevent dirty contexts staying too long in the pool.