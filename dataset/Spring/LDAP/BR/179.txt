DataSource connections not being released when LDAP connection fails in JDBC integrated transaction.
When using JDBC transaction integration in Spring LDAP, we have discovered that when our LDAP server is unavailable the doBegin() method of the ContextSourceAndDataSourceTransactionManager first calls super.doBegin() of the DataSourceTransactionManager which is successful, then it calls doBegin() of the ldapManagerDelegate which fails throwing a TransactionException , however no cleanup of the DataSource connection is being performed in this case.
This leaves a binding in the TransactionSynchronizationManager resources for the DataSource and also an open connection to the database, even though it was never used. 
Later if the same thread attempts to create a transaction the following IllegalStateException is being thrown because the DataSource is still bound to the thread in the TransactionSynchronizationManager:
java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHold er@79b1d1] for key [org.apache.commons.dbcp.BasicDataSource@335297] bound to thread [DefaultQuartzScheduler_Worker-7]
