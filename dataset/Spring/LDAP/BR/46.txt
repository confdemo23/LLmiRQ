DirContextAdapter.getModificatioItems() doesnt ignore case when collecting values to be removed and added.
DirContextAdapter.getModicationItems() calls collectModifications() to collect the modification items.  The section handling multi-valued attributes uses CollectionUtils to return a new list that will contain a substraction of the old values from the new values, but the substraction doesnt handle case insensitivity thus resulting in a list of items that require to be added which already exist in the Directory Server with a different case and resulting in an ATTRIBUTE_ALREADY_EXISIT error.  See below:
else {
            // Collect all modifications to attribute individually (this also
            // covers additions to a previously non-existant attribute).
            Collection oldValues = new LinkedList();
            Collection newValues = new LinkedList();
            collectAttributeValues(oldValues, currentAttribute);
            collectAttributeValues(newValues, changedAttr);
            Collection myModifications = new LinkedList();
            Collection addedValues = CollectionUtils.subtract(newValues,
                    oldValues);  // WILL ALSO RETURN VALUES TO BE ADDED THAT ARE ALREADY IN LDAP IF CASE IS DIFFERENT.
            Collection removedValues = CollectionUtils.subtract(oldValues,
                    newValues);  // WILL ALSO RETURN VALUES TO BE ADDED THAT ARE ALREADY IN LDAP IF CASE IS DIFFERENT.
            collectModifications(DirContext.ADD_ATTRIBUTE, changedAttr,
                    addedValues, myModifications);
            collectModifications(DirContext.REMOVE_ATTRIBUTE, changedAttr,
                    removedValues, myModifications);
            if (myModifications.isEmpty()) 
{
                // This means that the attributes are not equal, but the
                // actual values are the same - thus the order must have
                // changed. This should result in a REPLACE_ATTRIBUTE operation.
                myModifications.add(new ModificationItem(
                        DirContext.REPLACE_ATTRIBUTE, changedAttr));
            }