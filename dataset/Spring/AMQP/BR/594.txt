@RabbitListener creates two listener instances if annotated method is implementing interface method
If we have following situation: 
interface:






ConsumerService.java






public interface  ConsumerService&lt;TPayLoad&gt; {




  void consume(TPayLoad message);




}






and also following interface implementation:






TestingQueueConsumerServiceImpl.java






@Component




public class TestingQueueConsumerServiceImpl implements ConsumerService&lt;DemoMessage&gt; {




  private Log log = LogFactory.getLog(getClass());









  @Transactional




  @RabbitListener(queues = "${rabbitmq.queue.demo}", id = "myuniquecustomid")




  public void consume(@Payload TestMessage message) {




    Assert.notNull(message);




    log.info(message.toString());




  }




}






on application start we gets following exception






2016-03-24 09:26:48.971  INFO 58632 --- [           main] o.apache.catalina.core.StandardService   : Stopping service Tomcat




2016-03-24 09:26:48.982 ERROR 58632 --- [           main] o.s.boot.SpringApplication               : Application startup failed









java.lang.IllegalStateException: Another endpoint is already registered with id &amp;apos;myuniquecustomid&amp;apos;




	at org.springframework.util.Assert.state(Assert.java:392) ~[spring-core-4.2.5.RELEASE.jar:4.2.5.RELEASE]




	at org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistry.registerListenerContainer(RabbitListenerEndpointRegistry.java:146) ~[spring-rabbit-1.5.4.RELEASE.jar:na]




	at org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistry.registerListenerContainer(RabbitListenerEndpointRegistry.java:122) ~[spring-rabbit-1.5.4.RELEASE.jar:na]




	at org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistrar.registerAllEndpoints(RabbitListenerEndpointRegistrar.java:134) ~[spring-rabbit-1.5.4.RELEASE.jar:na]




	at org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistrar.afterPropertiesSet(RabbitListenerEndpointRegistrar.java:128) ~[spring-rabbit-1.5.4.RELEASE.jar:na]




	at org.springframework.amqp.rabbit.annotation.RabbitListenerAnnotationBeanPostProcessor.afterSingletonsInstantiated(RabbitListenerAnnotationBeanPostProcessor.java:209) ~[spring-rabbit-1.5.4.RELEASE.jar:na]




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:792) ~[spring-beans-4.2.5.RELEASE.jar:4.2.5.RELEASE]




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) ~[spring-context-4.2.5.RELEASE.jar:4.2.5.RELEASE]




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) ~[spring-context-4.2.5.RELEASE.jar:4.2.5.RELEASE]




	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) ~[spring-boot-1.3.3.RELEASE.jar:1.3.3.RELEASE]




	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766) [spring-boot-1.3.3.RELEASE.jar:1.3.3.RELEASE]




	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361) [spring-boot-1.3.3.RELEASE.jar:1.3.3.RELEASE]




	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) [spring-boot-1.3.3.RELEASE.jar:1.3.3.RELEASE]




	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191) [spring-boot-1.3.3.RELEASE.jar:1.3.3.RELEASE]




	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180) [spring-boot-1.3.3.RELEASE.jar:1.3.3.RELEASE]






This is happening as @RabbitListener annotation creates two listener instances, one for interface method and one for implementing method.
After  implementation of `ConsumerService&lt;DemoMessage&gt;` is removed then  everything is working as expected.