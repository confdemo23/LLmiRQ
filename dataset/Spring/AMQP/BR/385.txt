AmqpRejectAndDontRequeueException kills pub-sub-channel consumer
One documented way in spring-amqp to avoid message redelivery on listener failure is to inject an error-handler that throws AmqpRejectAndDontRequeueException. This works fine for SI amqp-backed point-to-point channels, but causes the consumer to attempt to restart for SI amqp-backed pub-sub channels. This attempt to restart fails because 
"there is a problem with the pub-sub channel in that if the consumer fails, it does not redeclare its queue - this has been partially addressed in 4.0.0.M3 (https://jira.spring.io/browse/INT-3278) in that the queue and binding will be redeclared in the event of a connection failure, but it still won&amp;apos;t handle a fatal (but recoverable) consumer exception because it only redeclares when it detects a new connection is created."
See reference URL forum posting for more details from Gary Russell, who understands this stuff way better than I do.
From the forum posting: 
"In order for the AmqpRejectAndDontRequeueException to be non-fatal to the consumer, when thrown from an ErrorHandler, it needs to be wrapped in a ListenerExecutionFailedException (we should probably document that, or even treat ARADREs in the same way as LEFEs; please open up a JIRA issue: https://jira.spring.io/browse/AMQP)."