AmqpAppender causes application error when declareExchange=true and no RabbitMQ connection available
When the declareExchange property is set for the AmqpAppender in log4j.properties, a call to org.apache.log4j.Logger.getLogger(..) will cause an application exception if the connection to RabbitMQ is not available. Stack trace below:






	org.springframework.amqp.AmqpConnectException: java.net.ConnectException: Connection timed out: connect




	org.springframework.amqp.rabbit.support.RabbitExceptionTranslator.convertRabbitAccessException(RabbitExceptionTranslator.java:58)




	org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:273)




	org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:500)




	org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils$1.createConnection(ConnectionFactoryUtils.java:85)




	org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.doGetTransactionalResourceHolder(ConnectionFactoryUtils.java:135)




	org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.getTransactionalResourceHolder(ConnectionFactoryUtils.java:71)




	org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:1278)




	org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:1271)




	org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:1247)




	org.springframework.amqp.rabbit.core.RabbitAdmin.declareExchange(RabbitAdmin.java:126)




	org.springframework.amqp.rabbit.log4j.AmqpAppender.maybeDeclareExchange(AmqpAppender.java:434)




	org.springframework.amqp.rabbit.log4j.AmqpAppender.activateOptions(AmqpAppender.java:407)




	org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307)




	org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172)




	org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104)




	org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:842)




	org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:768)




	org.apache.log4j.PropertyConfigurator.configureRootCategory(PropertyConfigurator.java:648)




	org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:514)




	org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:580)




	org.apache.log4j.helpers.OptionConverter.selectAndConfigure(OptionConverter.java:526)




	org.apache.log4j.LogManager.&amp;lt;clinit&amp;gt;(LogManager.java:127)




	org.apache.log4j.Logger.getLogger(Logger.java:117)






A workaround is to set the declareExchange property to false, however a better solution would be to wrap the declareExchange(..) method in a try/catch and follow the log4j error handler pattern when the connection is not available.