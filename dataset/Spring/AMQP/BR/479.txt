Send of message via tx-channel is commited early when external (JTA) transaction is present
When an external JTA/EJB transaction calls a transactional spring bean (using JtaTransactionManager), which in turn sends a RabbitMQ-message (using RabbitTemplate), then the message is committed on the channel when the spring transaction bracket ends (not as expected when the outer JTA transaction is committed).
This StackOverflow question describes the same problem:
http://stackoverflow.com/questions/25773000/spring-amqp-rabbitmq-transaction-rollback-in-ejb3-cmt
The reason seems to be, that AbstractPlatformTransactionManager.processCommit() executes onCommit() callbacks immediately (whereas afterCompletion-Callbacks are passed on to a surrounding transaction). As the RabbitTemplate uses onCommit() callbacks (see RabbitResourceSynchronization) this causes the described behavior.
Moving the channel commit to afterCompletion in RabbitResourceSynchronization should fix this problem.