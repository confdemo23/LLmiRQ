Fix Non-Managed DMLC with Spring-Managed Connection Factory
When a DirectMessageListenerContainer outside of an application context is using a CachingConnectionFactory from an application context, and the context is destroyed, the container continues to try to recover:






2016-12-03 16:21:45,404 ERROR org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler [null-consumerMonitor-1] : Unexpected error occurred in scheduled task.




org.springframework.amqp.AmqpConnectException: java.lang.IllegalStateException: The ApplicationContext is closed and the ConnectionFactory can no longer create connections.




	at org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer.doConsumeFromQueue(DirectMessageListenerContainer.java:487) ~[main/:?]




	at org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer.lambda$actualStart$4(DirectMessageListenerContainer.java:371) ~[main/:?]




	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) [spring-context-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]




	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_101]




	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [?:1.8.0_101]




	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_101]




	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [?:1.8.0_101]




	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_101]




	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_101]




	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_101]




Caused by: java.lang.IllegalStateException: The ApplicationContext is closed and the ConnectionFactory can no longer create connections.




	at org.springframework.util.Assert.state(Assert.java:640) ~[spring-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]




	at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:546) ~[main/:?]




	at org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer.doConsumeFromQueue(DirectMessageListenerContainer.java:483) ~[main/:?]




	... 9 more






If both are spring-managed, the container will also be stopped/destroyed.
Detect the exception and auto-stop the container when the condition is detected.
Different logic for start Vs. recovery.