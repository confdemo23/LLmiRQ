Query mapper does not use @Field field name when querying nested fields in combination with nested keywords
we have a document class;






@Document(collection = "Computer")




public class Computer




{




   @Id




   private String _id;









   private String batchId;









  @Field("stat")




   private String status;









   @Field("disp")




   private List&lt;Monitor&gt; displays;









   //setters and getters




}









public class Monitor {




   @Field("res")




   private String resolution;









  // setters/getters




}






In MongoTemplate.java, the call to :






protected &lt;S, T&gt; List&lt;T&gt; doFind(String collectionName, DBObject query, DBObject fields, Class&lt;S&gt; entityClass,




			CursorPreparer preparer, DbObjectCallback&lt;T&gt; objectCallback)









DBObject mappedQuery = queryMapper.getMappedObject(query, entity);






resolves the fields to the input query to the ones in the @Field annotations, except for these in embedded arrays. So, in the example above, resolution fields in DBObject remains resolution. While, the status field resolves to stat. 
Note the queries in the inner list, are setup as elemMatch.
The query submitted to mongo after getMappedObject is called:






{ "$and" : [ { "stat" : "A"} , { "disp" : { "$elemMatch" : { "$and" : [ { "resolution" : { "$ne" :  null }} , { "resolution" : { "$ne" : ""}}]}}}] , "batchId" : "5d0f1c53-92a2-48cb-8c84-1061769962c1"}






Which doesn&amp;apos;t get any data, because there is no field called resolution (the field in mongo is res). 
Note: The query input to getMappedObject is:






{ "$and" : [ { "status" : "A"} , { "displays" : { "$elemMatch" : { "$and" : [ { "resolution" : { "$ne" :  null }} , { "resolution" : { "$ne" : ""}}]}}}] , "batchId" : "5d0f1c53-92a2-48cb-8c84-1061769962c1"}






Notice the status and displays fields correctly get converted to the value in the @Field annotation. 
The correct query from getMappedObject should be:






{ "$and" : [ { "stat" : "A"} , { "disp" : { "$elemMatch" : { "$and" : [ { "res" : { "$ne" :  null }} , { "res" : { "$ne" : ""}}]}}}] , "batchId" : "5d0f1c53-92a2-48cb-8c84-1061769962c1"}






This basically means that any queries that operate on fields (with a name different from the peristed name) in the inner list will fail. 
