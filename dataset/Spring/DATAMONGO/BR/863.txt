QueryMapper.getMappedValue Fails To Handle Arrays Mapped To $in
I have a scenario where I run the following update to pull array elements with the given ids:
List&lt;BigInteger&gt; idsToRemove = Arrays.asList(
    BigInteger.valueOf(123), BigInteger.valueOf(234));
Update update = new Update()
        .pull("options",
            new BasicDBObject("_id",
            new BasicDBObject("$in", mongoOps
                .getConverter().convertToMongoType(idsToRemove))));
mongoOps.findAndModify(new Query(), update, MongoProduct.class);
This used to work before version 1.4.
Using version 1.4, I get a java.lang.ClassCastException (see attachment).
This seems to be due to a double call to QueryMapper.getMappedValue(Field, Object) from UpdateMapper.getMappedObjectForField(Field, Object) at line 80 of UpdateMapper, the first of which converts idsToRemove (which is already a BasicDBList) to an array of strings. The second call to getMappedValue from within super.getMappedObjectForField then tries to cast that array to Iterable&lt;?&gt;, which fails.
Finally, this might be a little out of scope, but I feel that if a BasicDBObject is passed to the Spring Data API, it should be taken as is. It should not be re-converted/re-mapped!