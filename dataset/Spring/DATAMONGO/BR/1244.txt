StringBasedMongoQuery handles complex expression parameters incorrectly.
Currently the regex based expression parameter scanning is too weak to handle nested object expressions like:






{&amp;apos;id&amp;apos;:?#{ [0] ? { $exists :true} : [1] }}






which currently yields the invalid mongo query:






{&amp;apos;id&amp;apos;:?expr0 : [1] }}






instead of:






{&amp;apos;id&amp;apos;:&amp;apos;?expr0&amp;apos;}






Further more, if complex parameter objects are passed as expressions 
they get unnecessarily quoted which could yield wrong results.
E.g:






@{&amp;apos;id&amp;apos;:?#{ [0] ? { $exists :true} : [1] }, &amp;apos;foo&amp;apos;:42, &amp;apos;bar&amp;apos;: ?#{ [0] ? { $exists :false} : [1] }}






Currently results in:






@{&amp;apos;id&amp;apos;:"{ \"$exists\" :true}", &amp;apos;foo&amp;apos;:42, &amp;apos;bar&amp;apos;: &amp;apos;foo&amp;apos; }}






when finally rendered.
This prevents the effective use of SpEL based parameter expressions
to be used for dynamic filtering with Spring Security as it is currently possible
with Spring Data JPA.
With this fixed one could easily perform filtering based on Spring Security context information in Spring Data MongoDB Repositories:






public interface PersonRepository extends CrudRepository&lt;Person, String&gt; {









	@Query("{id: ?#{ hasRole(&amp;apos;ROLE_ADMIN&amp;apos;) ? {$exists:true} : principal.id}}")




	List&lt;Person&gt; findAllForCurrentUserById();




}





