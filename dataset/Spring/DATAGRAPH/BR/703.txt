@Transactional causes an NPE when saving an entity
Consider the following entities:






@NodeEntity




public class Person {




 




    @GraphId Long id;




    




    private String firstName;




    private String lastName;




 




    @Relationship(type = "IS_FRIEND")




    private Set&lt;Friendship&gt; friendships = new HashSet&lt;&gt;();




	




    public Person() {}




	




    public Friendship addFriend(Person newFriend) {




	Friendship friendship = new Friendship(this, newFriend);




	this.friendships.add(friendship);




	return friendship;




    }




...




}




 




@RelationshipEntity(type = "IS_FRIEND")




public class Friendship {




 




    @GraphId private Long id;




	




    @StartNode private Person personStartNode;




    @EndNode private Person personEndNode;




	




    private long timestamp;




	




    public Friendship() {}




	




    public Friendship(Person personStartNode, Person personEndNode) {




	this.personStartNode = personStartNode;




	this.personEndNode = personEndNode;




    }




...




}











Then in the following test case, an NPE is thrown if the method is annotated with @Transactional.
java.lang.NullPointerException at org.neo4j.ogm.mapper.TransientRelationship.convert(TransientRelationship.java:63)






@Test




@Transactional // This causes the NPE




public void test() throws Exception {




	Person john = new Person();




	john.setFirstName("John");




	session.save(john);




		




	Person bob = new Person();




	bob.setFirstName("Bob");




	session.save(bob);




		




	Person bill = new Person();




	bob.setFirstName("Bill");




	session.save(bill);




		




	john = session.load(Person.class, john.getId());




	bob = session.load(Person.class, bob.getId());




	Friendship friendship1 = john.addFriend(bob);




	friendship1.setTimestamp(System.currentTimeMillis());




	session.save(john);




		




	john = session.load(Person.class, john.getId());




	bill = session.load(Person.class, bill.getId());




	Friendship friendship2 = john.addFriend(bill);




	friendship2.setTimestamp(System.currentTimeMillis());




	session.save(john); // throws NPE if annotated with @Transactional




}











Works as expected without @Transactional .
I&amp;apos;m testing with SDN4 4.0.0-BUILD-SNAPSHOT with neo4j-ogm version 1.1.0, spring-boot-starter-parent version 1.3.0.M1.
Test case: org.springframework.data.neo4j.examples.friends.savingPersonWhenTransactionalShouldWork