@Transactional Using multiple connections
When using a RedisTemplate with enableTransactionSupport set to true, it will open new connections for each redis operation.
Given this example:
@Transactional
public void test() {
	listOperations.rightPush("test", "a");
	listOperations.rightPush("test", "a");
}
When monitoring everything that the server handles, you will see this output:
1406625662.861592 [0 127.0.0.1:54842] "MULTI"
1406625662.861592 [0 127.0.0.1:54842] "RPUSH" "test" "\"a\""
1406625662.861592 [0 127.0.0.1:54842] "EXEC"
1406625663.220937 [0 127.0.0.1:54843] "MULTI"
1406625663.220937 [0 127.0.0.1:54843] "RPUSH" "test" "\"a\""
1406625663.220937 [0 127.0.0.1:54843] "EXEC"
With debugging the spring-data-redis source code we found that in RedisTemplate.java line 201 (version 1.3.1-RELEASE) the if condition checks for "enableTransactionSupport". If that is true, the connection is unbound. This leads to the next redis operation not working on the same connection anymore. If the condition would be "if (!enableTransactionSupport)" then the output is as we expect it to be:
1406626330.259418 [0 127.0.0.1:54894] "MULTI"
1406626330.259418 [0 127.0.0.1:54894] "RPUSH" "test" "\"a\""
1406626330.259418 [0 127.0.0.1:54894] "RPUSH" "test" "\"a\""
1406626330.259418 [0 127.0.0.1:54894] "EXEC"
