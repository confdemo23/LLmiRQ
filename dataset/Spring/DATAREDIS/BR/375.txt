A transactional RedisCacheManager decorates the cache with the TransactionAwareCacheDecorator twice
When the RedisCacheManager is configured the following way:






RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate());




cacheManager.setTransactionAware(true);




cacheManager.setCacheNames(Arrays.asList(cacheName));






then the created Cache instances are decorated twice with the TransactionAwareCacheDecorator.
The problem is that in the addConfiguredCachesIfNecessary method the not configured caches are retrieved with the getCache(cacheName) method which already returns a decorated cache. This cache is then used in the loadCaches() method of the AbstractCacheManager and there it will be decorated again with the TransactionAwareCacheDecorator.
The attached patch was created on the master branch and contains tests which show the issue and a quick fix is also implemented.
Shall I create a pull request for this?