DelegatingSecurityContextScheduledExecutorService only sets SecurityContext at first run of a scheduled task - subsequent runs do not have the SecurityContext set
When using DelegatingSecurityContextScheduledExecutorService to set a security context for a scheduled task, it works perfectly fine for the first task execution, but subsequent executions are (re-)scheduled by the same thread which was used to execute the task for the first time - this is done in ReschedulingRunnable.run()
Thread.currentThread() is used to set the originalThread variable in DelegatingSecurityContextRunnable - therefore DelegatingSecurityContextRunnable thinks it&amp;apos;s being executed in the original thread and does skip the set security context.
This means originalThread variable (in DelegatingSecurityContextRunnable) does contain the wrong value for all executions except the first one. Therefore all subsequent executions do fail because no security context is set ...






@Scheduled(cron="*/30 * * * * *", zone="UTC")




	public void myScheduledTask() {




//call to secured method




}









@Override




    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {




        taskRegistrar.setScheduler(taskExecutor());




    }




 




    public Executor taskExecutor() {




        ScheduledExecutorService delegateExecutor = Executors.newSingleThreadScheduledExecutor();




        SecurityContext schedulerContext = createSchedulerSecurityContext();




        return new DelegatingSecurityContextScheduledExecutorService(delegateExecutor, schedulerContext);




    }




 




    private SecurityContext createSchedulerSecurityContext() {




        SecurityContext context = SecurityContextHolder.createEmptyContext();




 




        Collection&lt;GrantedAuthority&gt; authorities = AuthorityUtils.createAuthorityList("ROLE_USER");




        Authentication authentication = new UsernamePasswordAuthenticationToken(




                "user",




                "user",




                authorities




        );




        context.setAuthentication(authentication);




 




        return context;




    }





