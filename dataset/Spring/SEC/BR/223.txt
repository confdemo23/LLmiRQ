Performance of hashCode in AbstractAuthenticationToken
The hashCode implementation in AbstractAuthenticationToken calculates the hashCode of its authorities:
    public int hashCode() {
        int code = 2305;
        if (this.getAuthorities() != null) {
            for (int i = 0; i &lt; this.getAuthorities().length; i++) 
{
                code = code * (this.getAuthorities()[i].hashCode() % 7);
            }
        }
        ...
There will be two calls to getAuthorities() for each GrantedAuthority. And this would happen every time hashCode is called on an AuthenticationToken that extends AbstractAuthenticationToken.
This would be fine if getAuthorities() simply returned a value, but it does more than that:
    public GrantedAuthority[] getAuthorities() {
        if (authorities == null) 
{
            return null;
        }

        GrantedAuthority[] copy = new GrantedAuthority[authorities.length];
        System.arraycopy(authorities, 0, copy, 0, authorities.length);
        return copy;
    }
The obvious fix for this unnecessary array copying is:
    public int hashCode() {
        int code = 2305;
        GrantedAuthority[] authorities = this.getAuthorities();
        if (authorities != null) {
            for (int i = 0; i &lt; authorities.length; i++) 
{
                code = code * (authorities[i].hashCode() % 7);
            }
        }
        ...