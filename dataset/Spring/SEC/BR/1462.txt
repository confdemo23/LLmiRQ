SessionFixationProtectionFilter creates new session even when the requested session id is null or invalid.
We ran into an issue where the hotspot browser on blackberry devices was not able to maintain the httpsession. We are using tomcat 6 as our web server. After investigation it was found that the tomcat is generating two Set-Cookie headers for JSESSIONID. Out of these two JSESSIONID second one is valid however the hotspot browser is picking up the wrong one (i.e. first one) and that is why it is not able to maintain the session. With further investigation it was found that the SessionFixationProtectionFilter invalidates the current session and then creates a new one if the user is authenticated during the current requests. This was causing the multiple JSESSIONID.
Though the issue seems to be with the browser and the tomcat but the SessionFixationProtectionFilter creates new session when it is not required i.e. when the requested session id is invalid or null. So we need to add an extra condition which also checks for request.isRequestedSessionIdValid() in the already exisiting condition
//existing code
if(request.getSession(false) == null || request.getAttribute(FILTER_APPLIED) != null) {
	chain.doFilter(request, response);
	return;
}
//changed code 
if(request.getSession(false) == null || request.getAttribute(FILTER_APPLIED) != null || request.isRequestedSessionIdValid() == false) {
	chain.doFilter(request, response);
	return;
}
This not only fixes the issue mentioned but also improves the performance as we are avoiding unnecessary session creation.