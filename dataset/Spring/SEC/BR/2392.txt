Unexpectedly long key created by KeyBasedPersistenceTokenService.allocateToken()
The method allocateToken in KeyBasedPersistenceTokenService creates a token with an unexpectedly long key.
The reason for this is that the attribute pseudoRandomNumberBits (default = 256) is not converted to a number of bytes in the method generatePseudoRandomNumber() :






    private String generatePseudoRandomNumber() {




        byte[] randomizedBits = new byte[pseudoRandomNumberBits];




        secureRandom.nextBytes(randomizedBits);




        return new String(Hex.encode(randomizedBits));




    }






This string is then concatenated to others to create the final key of the Token :






        String content = Long.toString(creationTime) + ":" + pseudoRandomNumber + ":" + extendedInformation;









        // Compute key




        String sha512Hex = Sha512DigestUtils.shaHex(content + ":" + serverSecret);




        String keyPayload = content + ":" + sha512Hex;




        String key = Utf8.decode(Base64.encode(Utf8.encode(keyPayload)));





