Second access to database when NullUserCache is used
I am use DaoAuthenticationProvider.
When user enter right login and wrong  password, AbstractUserDetailsAuthenticationProvider makes 2 queries to database.
This happends when this class uses NullUserCache (by default) for user caching.
In these lines we load user details from database if there is no user in the cache (and remember that in cacheWasUsed) :
        UserDetails user = this.userCache.getUserFromCache(username);
        if (user == null) {
            cacheWasUsed = false;
            try 
{
                user = retrieveUser(username,
                    (UsernamePasswordAuthenticationToken) authentication);
                    ......
            }
....
        }
But when user enter wrong password we just load user one more time:
       // This check must come here, as we don&amp;apos;t want to tell users
        // about account status unless they presented the correct credentials
        try 
{
            additionalAuthenticationChecks(user,
                (UsernamePasswordAuthenticationToken) authentication);
        }
 catch (AuthenticationException exception) 
{
            // There was a problem, so try again after checking we&amp;apos;re using latest data
            cacheWasUsed = false;
            user = retrieveUser(username,
                    (UsernamePasswordAuthenticationToken) authentication);
            additionalAuthenticationChecks(user,
                (UsernamePasswordAuthenticationToken) authentication);
        }