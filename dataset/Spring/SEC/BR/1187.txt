AbstractUserDetailsAuthenticationProvider allows login of disabled, locked or expired users
If I look into AbstractUserDetailsAuthenticationProvider, I see the followng code:
  try 
{
                user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);
            }
 catch (UsernameNotFoundException notFound) {
                if (hideUserNotFoundExceptions) 
{
                    throw new BadCredentialsException(messages.getMessage(
                            "AbstractUserDetailsAuthenticationProvider.badCredentials", "Bad credentials"));
                }
 else 
{
                    throw notFound;
                }
            }
            Assert.notNull(user, "retrieveUser returned null - a violation of the interface contract");
        }
        preAuthenticationChecks.check(user);
        try 
{
            additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);
        }
 catch (AuthenticationException exception) {
            if (cacheWasUsed) 
{
                // There was a problem, so try again after checking
                // we&amp;apos;re using latest data (ie not from the cache)
                cacheWasUsed = false;
                user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);
### HERE ###
                additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);
            }
 else 
{
                throw exception;
            }
        }
Isn&amp;apos;t it necessary to execute the preAuthenticationChecks at ### HERE ### again?
I don&amp;apos;t want that disabled, locked or expired users are able to log in. 