Issue with User.getAuthorities() returning GrantedAuthority[]s in varying order and User.equals(Object) test failures as a result
JdbcUserDetailsManagerTests would fail during the createUserInsertsCorrectData and updateUserChangesDataCorrectlyAndClearsCache tests on certain platforms.
This was due to issues with the GrantedAuthority[] iteration order as returned by User. This problem was caused because the tests included:
private static final UserDetails joe = new User("joe", "password", true, true, true, true, AuthorityUtils.stringArrayToAuthorityArray(new String[]
{"A","C","B"}
));
In turn JdbcDaoImpl.loadUserByUsername(String) is internally using a HashSet to manage the merging of GrantedAuthority[] instances from groups, those directly-assigned to the user, and any provided via the addCustomAuthorities(String username, List authorities) method. Because HashSet does not guarantee the order in which elements are returned, some platforms would return the above authorities as A, C, B (as required by the User.equals(Object) method and tests such as JdbcUserDetailsManagerTests which use User.equals(Object)) whereas others would reorder it (to A, B, C, although other variants were possible):
java.lang.AssertionError: expected:&lt;org.springframework.security.userdetails.User@234c9000: Username: joe; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: A, C, B&gt; but was:&lt;org.springframework.security.userdetails.User@234c9000: Username: joe; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: A, B, C&gt;
The issue is not so much with JdbcDaoImpl or its corresponding test, but rather that the User.equals(Object) method and/or User.getAuthorities() should more predictably operate when the GrantedAuthority[] array ordering varies. I am unaware of any users depending on GrantedAuthority[] ordering logic, as this has never been specified in the UserDetails contract as predictable. Therefore the most appropriate solution to this issue is to specify that UserDetails.getAuthorities() must consistently return GrantedAuthority[]s in the order of their natural key, irrespective of the order in which the GrantedAuthority[]s were added to the UserDetails instance. The UserDetails.equals(Object) should ensure it uses UserDetails.getAuthorities() in its evaluations, thus simplifying implementation of the symmetry requirements associated with Object.hashCode(). The GrantedAuthority interface should also extend Comparable, to ensure implementations have a simple way of implementing the required logic.