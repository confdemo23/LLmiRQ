AbstractAuthenticationToken Hashcode computation
The hashCode implementations in User as well as AbstractAuthenticationToken uses the MOD operator with the value 7. 
    public int hashCode() {
        int code = 2305;
        if (this.getAuthorities() != null) {
            for (int i = 0; i &lt; this.getAuthorities().length; i++) 
{
                code = code * (this.getAuthorities()[i].hashCode() % 7);
            }
        }
        ...
This has the unfortunate result that when the hashCode of say a GrantedAuthority is dividable by 7, the result of the MOD will be zero. Since it multiplies all other results with itself, the hashCode will evaluate to zero.
I&amp;apos;m not sure of the consequences of this, but since HttpSessionContextIntegrationFilter compares the hashCode of the SecurityContext before and after the filter chain, this could cause some unexpected behaviour.
The obvious question is how often a hashCode of a String evaluates to something dividable by 7. Well, it&amp;apos;s actually pretty common. An empty password in the principal does, for example. So does "ROLE_General.ITS" and many others.