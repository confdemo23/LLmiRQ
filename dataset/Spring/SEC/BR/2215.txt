Injecting AuthenticationManager to SecurityContextHolderAwareRequestFilter
I am trying to use servletApi() of Spring Security 3.2 M2 at my embedded Jetty 9.x application but could not be successful. AuthenticationManager seems null at SecurityContextHolderAwareRequestFilter. And because of this HttpServlet3RequestFactory is created with null authenticationManager. 
Here is the implementation of my Security Config:






@Configuration




@EnableWebSecurity




public class SecurityConfig extends WebSecurityConfigurerAdapter {














   @Override




   protected void registerAuthentication(AuthenticationManagerBuilder auth) throws Exception {




      auth




         .inMemoryAuthentication()




         .withUser("user").password("password").roles("USER")




         .and();




   }









   @Bean




   @Override




   public AuthenticationManager authenticationManagerBean()  throws Exception {




      return super.authenticationManagerBean();




   }














   @Override




   protected void configure(HttpSecurity http) throws Exception {




      http




//         .exceptionHandling().and()




         .sessionManagement()




            .sessionCreationPolicy(SessionCreationPolicy.ifRequired)




            .sessionRegistry(new StarSessionRegistry()).and().and()




         .securityContext().and()




//         .requestCache().and()




//         .anonymous().and()




         .servletApi().and()




//         .apply(new DefaultLoginPageConfigurer&lt;HttpSecurity&gt;()).and()




//         .logout()




//         .and()




         .authorizeUrls()




         .antMatchers("/login").permitAll()




         .antMatchers("/**").authenticated();




   }




}






As a workaround I have implemented a custom beanpostprocessor which is injecting an authenticationManager. 
I am very new to Spring Security but I have checked test cases and sample applications but could not find something useful. 