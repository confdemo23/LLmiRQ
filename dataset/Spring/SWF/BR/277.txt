FlowExecutorImpl&apos;s resume() and refresh() methods should throw a FlowException for an empty flowExecutionKey
FlowExecturoImpl&amp;apos;s resume() and refresh() methods both call executionRepository.parseFlowExecutionKey(flowExecutionKey), which throws an IllegalArgumentException if the supplied encodedKey is empty (i.e., Assert.hasText(encodedKey, "The string encoded flow execution key is required")).
This behavior does not comply with the FlowExecutor&amp;apos;s API, which states that resume() and refresh() should throw a FlowException.
Alternatively, AbstractConversationFlowExecutionRepository&amp;apos;s parseFlowExecutionKey(String encodedKey) method should throw a FlowExecutionRepositoryException instead of the IllegalArgumentException.
In either case, the goal is to have SWF throw SWF specific exceptions instead of allowing an IllegalArgumentException to trickle all the way up the execution stack.
The impetus for this JIRA issue is that I am updating the SpringWebFlowExceptionResolver (see SWF-158), and it is not reasonable to register an IllegalArgumentException as a "supported SWF exception".
To reproduce this bug, configure a continuation backed flow using a RequestPathFlowExecutorArgumentHandler (configured with a defaultFlowId) as the argument handler in the FlowController, and omit the key from the URL. For example, with a web application context mapped to the ROOT and a FlowController mapped to "registration", accessing the following URL will throw an IllegalArgumentException:
http://localhost:8080/registration/k/