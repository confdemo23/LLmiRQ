CONVERSATION_CONTAINER_KEY should be unique per FlowExecutor 
Background: If you configure a FlowExecutor within a single web app using a FlowExecutorFactoryBean, a SessionBindingConversationManager will be instantiated by default as your ConversationManager. This SessionBindingConversationManager will then store a ConversationContainer in the HTTP session under the key "webflow.conversation.container". In addition, you can configure the maxConversations to 1 if you like. This works as expected as long as you only configure only one such FlowExecutor.
Unintuitive behavior: if you configure multiple, unique FlowExecutors within a single web app using FlowExecutorFactoryBean as described above with maxConversations=1, you will then notice that both FlowExecutors ultimately use the same session key and thus conflict with each other. For example, if you start one flow for FlowExecutor #1 and start another flow which is handled by FlowExecutor #2, the execution of the 2nd flow will destroy the execution of the 1st flow.
The issue lies in the interpretation of the semantics of maxConversations. As it is currently implemented (i.e., with a single, global session key), the maxConversations takes effect for all configured FlowExecutors within a single web app.
I believe that this is unintuitive and actually not the desired behavior. If I configure two completely separate FlowExecutors with different flow repositories within a single web app, I expect that the configuration of one of them will not conflict with the configuration of the other.
See also:
http://forum.springframework.org/showthread.php?t=38156