Annotation configuration based TestContext
Why don&amp;apos;t you add AnnotationContextLoader that supports annotation configuration based TestContext.
for example. If there is an annotation configuration like this
@Configuration
public class SpringAnnotationConfigTestAppConfig {
    @Bean
    public String name()
{
        return "keesun";
    }

}
and, at the same package, I can make test like this.
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = 
{"."})
public class SpringAnnotationConfigTest {

    @Autowired ApplicationContext ac;
    @Autowired String name;

    @Test
    public void di(){
        assertNotNull(ac);
        assertThat(name, is("keesun"));
    }

}

then, conventionally SpringJUnit4ClassRunner finds SpringAnnotationConfigTest + "AppConfig.java" for an annotation configuration.

Of course, It makes sence that we sould use &amp;apos;locations&amp;apos; attribute of @ContextConfigruation like these.

@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"/sandbox/springtest/sample/SpringAnnotationConfigTestAppConfig.java"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"/sandbox/springtest/sample/"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"/sandbox/springtest/sample"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"./SpringAnnotationConfigTestAppConfig.java"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"./"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"."}
)
with &amp;apos;.Java&amp;apos; locations can be used to AnnotationConfigurationApplicationContext.regist(), and without &amp;apos;.java&amp;apos; locations will be used to AnnotationConfigurationApplicationContext.scan().
What do you think about this?