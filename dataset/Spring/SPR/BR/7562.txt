TypeDescriptor.forElementType() is broken for nested collections
The start of forElementType() is defined as:
if (getType().equals(elementType)) {
  return this;
}
Unfortunately, this fails when the TypeDescriptor represents a List&lt;List&lt;...&gt;&gt;
When calling getElementType(), the call stack will be getElementType() -&gt; getElementTypeDescriptor() -&gt; forElementType()
at which point, the elementType field will still be null.
The equality check will therefore see that List&lt;null&gt; == List&lt;null&gt;, and so the TypeDescriptor will be returned as its own element descriptor.
This leads to a recursive definition, where the descriptor now represents a List&lt;List&lt;List&lt;...&lt;List&lt;List&lt;... etc.
