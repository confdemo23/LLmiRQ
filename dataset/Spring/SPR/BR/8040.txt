ServletRequestDataBinder.bind should also consider wrapped ServletRequests when checking for Multipart,  to comply with HiddenHttpMethodFilter.
When using HiddenHttpMethodFilter, like for example Spring Roo generated apps do, the ServletRequest is wrappd into a HttpMethodRequestWrapper (at least in cases, where wrapping is necessary, for example for PUT requests emulated with POST and httpMethod parameter).
Later, when it comes to data binding the ServletRequestDataBinder.bind method checks for multipart requests:






MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request);




		if (request instanceof MultipartRequest) {




			MultipartRequest multipartRequest = (MultipartRequest) request;




			bindMultipart(multipartRequest.getMultiFileMap(), mpvs);




		}




		doBind(mpvs);






But if the multipart request has been wrapped into a HttpMethodRequestWrapper , this won&amp;apos;t work anymore, since it is not an instance of MultipartRequest. Thus, no databinding for the Multipart files occurs.
NOTE: My setup ist the following:

I am using a MultipartFilter in front of the WebMethodFilter, as suggested in bold letters in  the Javadoc of HiddenHttpMethodFilter
I am using binding for the uploaded files, instead of "injecting" them as parameters in the controller mehtods. For this, I register an according converter / bean editor from MultipartFile to byte array
For POST request, this setup works fine. For PUT (emulated by POST and httpMethod parameter), the problem described above arises.

