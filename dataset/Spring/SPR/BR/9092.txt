Injecting / autowiring collection provider doen&apos;t work
I implement contributions for my application and I found inconsistent behaviour for Provider/ObjectFactory. There are defined classes for different contributions:






@Contribute("rest")




@Named("bean-contrib2a")




public class Contrib2A implements ContribRest { ... }









@Contribute("rest")




@Named("bean-contrib2b")




public class Contrib2B { ... }









@Contribute("non-rest")




@Named("bean-contrib3a")




public class Contrib3A implements ContribRest { ... }









@Contribute("non-rest")




@Named("bean-contrib3b")




public class Contrib3B { ... }






Code to show injecting scenario looks like that:






@Named("applicationRest")




public class ApplicationRest extends Application {









    private List&lt;ContribRest&gt; contrib2;




    private List&lt;ContribRest&gt; contrib4;









    private ObjectFactory&lt;List&lt;ContribRest&gt;&gt; ofContrib2;




    private ObjectFactory&lt;List&lt;ContribRest&gt;&gt; ofContrib4;









    private Provider&lt;List&lt;ContribRest&gt;&gt; pvdContrib2;




    private Provider&lt;List&lt;ContribRest&gt;&gt; pvdContrib4;









    @Inject




    public void setContrib2(@Contribute("rest") List&lt;ContribRest&gt; contrib2) {




        this.contrib2 = contrib2;




    }









    @Autowired(required = false)




    public void setContrib4(@Contribute("other") List&lt;ContribRest&gt; contrib4) {




        this.contrib4 = contrib4;




    }









    @Inject




    public void setOfContrib2(@Contribute("rest") ObjectFactory&lt;List&lt;ContribRest&gt;&gt; ofContrib2) {




        this.ofContrib2 = ofContrib2;




    }









    @Autowired(required = false)




    public void setOfContrib4(@Contribute("other") ObjectFactory&lt;List&lt;ContribRest&gt;&gt; ofContrib4) {




        this.ofContrib4 = ofContrib4;




    }









    @Inject




    public void setPvdContrib2(@Contribute("rest") Provider&lt;List&lt;ContribRest&gt;&gt; pvdContrib2) {




        this.pvdContrib2 = pvdContrib2;




    }









    @Autowired(required = false)




    public void setPvdContrib4(@Contribute("other") Provider&lt;List&lt;ContribRest&gt;&gt; pvdContrib4) {




        this.pvdContrib4 = pvdContrib4;




    }






Injection finish with that result:






INFO contrib2=[Contrib2A@51a19458] -




INFO contrib4=null




ERROR ofContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a]




INFO ofContrib4=null




ERROR pvdContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a] - 




INFO pvdContrib4=null











Injecting list looks correct - classes with other contribution and type are filtered and only Contrib2A is injected. 
Unfortunately injecting Provider or ObjectFactory tries to inject List a not all beans for this list and it looks as a bug.
Maybe you can provide alternative way to how can I provide this list with all instances contributed (scanned) without manually defining list in XML.