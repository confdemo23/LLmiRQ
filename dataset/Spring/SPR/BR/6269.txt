Include &apos;ASE&apos; in the list of product names recognised by JDBCUtils as Sybase
JdbcUtils#commonDatabaseName uses a number of hardcoded database product names to identify Sybase. 
public static String commonDatabaseName(String source) {
  String name = source;
  if (source != null &amp;&amp; source.startsWith("DB2")) 
{
    name = "DB2";
  }
  else if ("Sybase SQL Server".equals(source) ||
    "Adaptive Server Enterprise".equals(source) || "sql server".equals(source) ) 
{
    name = "Sybase";
  }
  return name;
}
Unfortunately, when using JTDS 1.2.4 against a Sybase 15.0.3 server, JtdsDatabaseMetadata will (for some server configurations) return &amp;apos;ASE&amp;apos; rather than &amp;apos;sql server&amp;apos;. 
This has knock on implications, most notably in this case in CallMetaDataProviderFactory, which uses the common database name to determine which meta data provider to use:
else if ("Sybase".equals(databaseProductName)) {
  provider = new SybaseCallMetaDataProvider((databaseMetaData));
}
The net result of this is that a generic provider is used rather than a Sybase provider. The generic provider does not function correctly with at least one stored procedure in one of our applications, which results in no parameters being passed to the server.
The proposed change would be to introduce &amp;apos;ASE&amp;apos; alongside the existing Sybase product name checks in JdbcUtils, so that it is identified correctly as Sybase. 