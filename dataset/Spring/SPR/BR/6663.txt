@Scheduled tasks scheduled multiple times when a child application context is refreshed
Just switched to the new @Scheduled, configured only with the default &lt;task:annotation-driven/&gt;.  I noticed that my @Scheduled task was being executed more frequently than expected. I have Spring/Struts integration that creates a child web app context on init of ActionServlet.  Looks like when the child app context is created, an event is published to the parent root WAC.  This event causes the ScheduledAnnotationBeanPostProcessor in the root WAC to execute ScheduledTaskRegistrar.afterPropertiesSet again, which schedules all tasks again.  So I end up with the same task scheduled to execute at a fixed rate twice.
Stack trace on init of the Struts ActionServlet:
ScheduledTaskRegistrar.afterPropertiesSet() line: 107	
ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ContextRefreshedEvent) line: 135	
ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ApplicationEvent) line: 1	
SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent) line: 97	
XmlWebApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 294	
XmlWebApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 296	
XmlWebApplicationContext(AbstractApplicationContext).finishRefresh() line: 858	
XmlWebApplicationContext(AbstractApplicationContext).refresh() line: 419	
ContextLoaderPlugIn.createWebApplicationContext(WebApplicationContext) line: 356	
ContextLoaderPlugIn.initWebApplicationContext() line: 297	
ContextLoaderPlugIn.init(ActionServlet, ModuleConfig) line: 227	
ActionServlet.initModulePlugIns(ModuleConfig) line: 871	
ActionServlet.init() line: 359	
ActionServlet(GenericServlet).init(ServletConfig) line: 212	