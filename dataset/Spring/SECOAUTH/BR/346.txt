scope attribute not working correctly on <oauth:resource/> in 1.0.0RC3
I am working on updating from 1.0.0M6d to 1.0.0RC3. In my client I have the following oauth:resource defined:






 




&lt;oauth:resource id="service" type="authorization_code" client-id="client" client-secret="secret"




		access-token-uri="${accessTokenUri}" user-authorization-uri="${userAuthorizationUri}"  scope="read,write"/&gt;






On the resource I have the following:






 




&lt;http pattern="/service/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"




		access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security"&gt;




		&lt;anonymous enabled="false" /&gt;




		&lt;intercept-url pattern="/service" access="ROLE_USER,SCOPE_READ" /&gt;




		&lt;intercept-url pattern="/service/**" access="ROLE_USER,SCOPE_READ" method="GET"/&gt;




		&lt;custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" /&gt;




		&lt;access-denied-handler ref="oauthAccessDeniedHandler" /&gt;




	&lt;/http&gt;






and for the AccessDecisionManager:






&lt;bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans"&gt;




		&lt;constructor-arg&gt;




			&lt;list&gt;




				&lt;bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" /&gt;




				&lt;bean class="org.springframework.security.access.vote.RoleVoter" /&gt;




				&lt;bean class="org.springframework.security.access.vote.AuthenticatedVoter" /&gt;




			&lt;/list&gt;




		&lt;/constructor-arg&gt;




	&lt;/bean&gt;






When I replace ScopeVoter with my own implementation, I can see that the AuthorizationRequest associated with the Authentication passed to the vote() method on ScopeVoter has only a single scope associated with it: &amp;apos;read write&amp;apos;. It looks like somewhere the scopes are getting parsed incorrectly in the request. If I remove the scope attribute from oauth:resource, it seems to fall back to the scopes registered with the client and the request succeeds.
I did some further investigation to narrow down the issue. I am using the JdbcTokenStore. If I load the access token, the scope field is ['read write'], instead of ['read', 'write']. If load the AuthorizationRequest (readAuthentication) for the access token, the scope is ['read', 'write'] which is correct. Based on this the scope seems to be getting mangled  either when the access token is initially created or when it is read on the resource server.