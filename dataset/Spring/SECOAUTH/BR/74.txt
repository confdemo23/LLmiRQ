invalid verifier check if the client isn&apos;t configured for 1.0a
I&amp;apos;m just starting to use the Spring OAuth module and I&amp;apos;m a bit confused about its processing of an authorized request token in OAuth spec 1.0 (not 1.0a). I&amp;apos;m writing a client which is attempting to gain an access token through the standard OAuth 1.0 workflow, and I believe that I&amp;apos;m seeing some incorrect behavior regarding processing of an authorized request token handed back by the service provider.
In my webapp&amp;apos;s workflow, the OAuth module is able to successfully gain an unauthorized request token from the service provider, redirect the client to the service provider&amp;apos;s authorization page, and the service provider then redirects the client back to my webapp with the authorized request token once the user has authorized it. Since the service provider in this case is an OAuth 1.0 service provider, the authorized request token does NOT come back from the service provider with a verifier.
The strange thing that I see in the M3 code is that when the OAuth module processes the inbound authorized request token, it looks for a verifier without checking first to see if it&amp;apos;s configured for 1.0 or 1.0a. When it doesn&amp;apos;t find a verifier attached to the request (again, because I&amp;apos;m talking to a OAuth 1.0 service provider), it just tosses away the valid, authorized request token and starts the OAuth workflow all over again.
I&amp;apos;m wondering if there should be a check, upon receiving a request token which has been authorized, if the client is configured for OAuth 1.0 vs 1.0a, and only check for the presence of a verifier if 1.0a is selected.
See http://forum.springsource.org/showthread.php?111484-Oauth-verifier-required-for-authenticated-request-token-processing-in-1.0.