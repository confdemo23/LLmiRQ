Scope order lost in AuthorizationRequest constructor
The sorted TreeSet with scopes gets re-stored as an unmodifiable HashSet which ruins the sorted order.
The org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint#authorize(...) method (at AuthorizationEndpoint:101) uses the public AuthorizationRequest(Map&lt;String, String&gt; parameters) constructor of org.springframework.security.oauth2.provider.AuthorizationRequest.
The constructor, in turn, uses OAuth2Utils.parseParameterList(parameters.get("scope")) to parse the scope and build a sorted scope set which will is sent to AuthorizationRequest&amp;apos;s inner (private) constructor.
OAuth2Utils.parseParameterList stores the parsed scope in a TreeSet guaranteeing a sorted order but then the inner private constructor (AuthorizationRequest:75) modifies the order with this row (AuthorizationRequest:78) Collections.unmodifiableSet(new HashSet&lt;String&gt;(scope));
The result is that the scope set is not ordered. An implication of this is that two "equal" scopes (i.e. with the same authority strings but with different order) could be generating different AuthenticationKeys when using the DefaultAuthenticationKeyGenerator.
I think it is a good idea to keep the order intact internally. It would maybe also be an idea to have a security solution for this in DefaultAuthenticationKeyGenerator (but it might cost more than just keeping the Set sorted all the time)
I also think the SCOPE parameter of the parameters map should be sorted the same way.