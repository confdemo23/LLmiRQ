Scope of JMSContextProducer should be either @Request or @Tx not default
From this email thread.
Note that if you @Inject JMSProducer into a @ApplicationScoped bean then that&amp;apos;s the scoping used, although it&amp;apos;s not correct as the scope should be either @Request or @TransactionScoped
To: users@jms-spec.java.net
Subject: [jms-spec users] Re: Confusion about JMSProducer methods and CDI
On 05/06/2014 19:29, Elias Ross wrote:
&gt;
&gt; The other question I had was the scoping for CDI. For example:
&gt;
&gt; @ApplicationScoped
&gt; public class MyClient 
{

&gt;     @Inject JMSContext context;

&gt; }
&gt;
&gt; public class MyServlet extends HttpServlet 
{

&gt;     @Inject MyClient client;

&gt; }
&gt;
&gt; Then JMSContext ends up being potentially shared between multiple
&gt; threads. I would expect the scoping of JMSContext to be request, not
&gt; @Dependent here.
&gt;
Why do you say that the "JMSContext ends up being potentially shared between multiple threads"?
The scope of the injected JMSContext is defined in the JMS 2.0 spec, section 12.4.4. "Scope of injected JMSContext 
objects". Essentially, if there&amp;apos;s a transaction in progress then the injected JMSContext will have transaction scope, 
otherwise it will have request scope.
It looks like you&amp;apos;re in a servlet here, and you haven&amp;apos;t started a transaction, so the injected JMSContext must have 
request scope.
The scope of the injected JMSContext is defined in the JMS 2.0 spec, section 12.4.4. "Scope of injected JMSContext objects". Essentially, if there&amp;apos;s a transaction in progress then the injected JMSContext will have transaction scope, otherwise it will have request scope.
It looks like you&amp;apos;re in a servlet here, and you haven&amp;apos;t started a transaction, so the injected JMSContext must have request scope.