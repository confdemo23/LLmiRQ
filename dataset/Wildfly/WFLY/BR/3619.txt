XA END / un-enlist for database connection called before all persistence units have performed database updates
While trying to port an EE application from JBoss5 to WF8 the following problem occurred:
EJBs (@Required) using JPA to do some data changes.
Some changes get already written to the database, others reside in the session cache.
After the top EJB call returns, a Hibernate Session flush is triggered in beforeCompletion.
Then more changes are flushed to the database, but I run in a reproduceable database locking problem.
After some time an update of a row fails with lock wait timeout. This row has been inserted prior during the EJB call.
There should be exactly one xa transaction active processing all data changes.
But the database shows two active session, one is an xa transaction with sessionId -2 (orphaned), the other session is a local transaction.
After analyzing all database communication with the help of the JDBC driver logging I found the following behaviour:

a connection is enlisted and xa start called
the same connection is used for several select / insert / update statements
after return of the top EJB call on the same connection xa end and connection un-enlist is called
the same connection is used for session flush (beforeCompletion) but with local transaction because the connection is no longer associated with the xa transaction, so locks can be expected.

Shouldn&amp;apos;t xa end be called AFTER beforeCompletion / session flush!?!