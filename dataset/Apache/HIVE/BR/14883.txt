Checks for Acid operation/bucket table write are in the wrong place
The following code in 
 in SemanticAnalyzer.getMetaData(QB qb, ReadEntity parentInput) 

      // Disallow INSERT INTO on bucketized tables

      boolean isAcid = AcidUtils.isAcidTable(tab);

      boolean isTableWrittenTo = qb.getParseInfo().isInsertIntoTable(tab.getDbName(), tab.getTableName());

      if (isTableWrittenTo &amp;&amp;

          tab.getNumBuckets() &gt; 0 &amp;&amp; !isAcid) {

        throw new SemanticException(ErrorMsg.INSERT_INTO_BUCKETIZED_TABLE.

            getMsg("Table: " + tabName));

      }

      // Disallow update and delete on non-acid tables

      if ((updating() || deleting()) &amp;&amp; !isAcid &amp;&amp; isTableWrittenTo) {

        //isTableWrittenTo: delete from acidTbl where a in (select id from nonAcidTable)

        //so only assert this if we are actually writing to this table

        // Whether we are using an acid compliant transaction manager has already been caught in

        // UpdateDeleteSemanticAnalyzer, so if we are updating or deleting and getting nonAcid

        // here, it means the table itself doesn&amp;apos;t support it.

        throw new SemanticException(ErrorMsg.ACID_OP_ON_NONACID_TABLE, tabName);

      }



is done in the loop "    for (String alias : tabAliases) {" which is over tables being read.
Should be done in "    for (String name : qbp.getClauseNamesForDest()) {" loop