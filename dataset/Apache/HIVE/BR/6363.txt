IllegalArgumentException is thrown instead of SQLException
parseURL in the following code is throwing IllegalArgumentException 
http://svn.apache.org/viewvc/hive/trunk/jdbc/src/java/org/apache/hive/jdbc/Utils.java?view=markup 
This is going to break other JDBC based connectors because java.sql.DriverManager doesnt catch IllegalArgumentException while probing for correct Driver for a given URL. 
A simple test case can have class.forName(org.apache.hive.jdbc.HiveDriver) (Loading hiveserver2 JDBC driver) followed by class.forName(org.apache.hadoop.hive.jdbc.HiveDriver)(Loading hiveserver JDBC driver).
In this case hiveserver connection will fail with BAD URL format for hiveserver. If you reverse the driver loading to hiveserver followed by hiveserver2, both the connections will be successful.
Following code in java.sql.DriverManager is causing the issue 
[[ 
// Worker method called by the public getConnection() methods. 
private static Connection getConnection( 
// Walk through the loaded registeredDrivers attempting to make a connection. 
// Remember the first exception that gets raised so we can reraise it. 
for(DriverInfo aDriver : registeredDrivers) { 
// If the caller does not have permission to load the driver then 
// skip it. 
if(isDriverAllowed(aDriver.driver, callerCL)) { 
try { 
Connection con = aDriver.driver.connect(url, info); 
if (con != null) 
{ 

// Success! 

println("getConnection returning " + aDriver.driver.getClass().getName()); 

return (con); 

}
 
} catch (SQLException ex) { 
if (reason == null) 
{ 

reason = ex; 

}
 
} 
} else 
{ 

println(" skipping: " + aDriver.getClass().getName()); 

}
 
} 
} 
]] 
Marking it as critical because this is going to restrict consuming JDBC driver in production environment where many drivers are loaded on requirement rather than statically loading all drivers.