MailConfiguration injected into MailComponent by Spring is ignored.
A Camel org.apache.camel.component.mail.MailComponent is configured via Spring as:

&lt;bean id="mailbox" class="org.apache.camel.component.mail.MailComponent"&gt;
  &lt;property name="configuration"&gt;
    &lt;bean id="mailbox_config" class="org.apache.camel.component.mail.MailConfiguration"&gt;
      &lt;property name="protocol"&gt;&lt;value&gt;pop3&lt;/value&gt;&lt;/property&gt;
      &lt;property name="host"&gt;&lt;value&gt;mail.abc.com&lt;/value&gt;&lt;/property&gt;
      &lt;property name="username"&gt;&lt;value&gt;test&lt;/value&gt;&lt;/property&gt;
      &lt;property name="password"&gt;&lt;value&gt;test&lt;/value&gt;&lt;/property&gt;
    &lt;/bean&gt;
  &lt;/property&gt;
&lt;/bean&gt;


It is silly to use the hard-coded URI in Java code to create a mail endpoint. Instead I want to use the above method to specify everything (I mean everything) about how to access a mail server (send or receive) in different deployments.  Up to Camel 1.5, line 73 of MailComponent.createEndpoint() ignored the MailConfiguration variable MailComponent.configuration and created a new one to parse the URI. This defeats the Spring injection above, which is recommended by Camel&amp;apos;s own User&amp;apos;s Guide.
Line 73 and 74 should be changed from:

        MailConfiguration config = new MailConfiguration();
        config.configure(url);
to

        configuration.configure(url);
In addition, if the uri parameter equals the component name, createEndpoint() should not parse it at all, so that the following route builder will create the mail endpoint solely according to the Spring injection of MailConfiguration:

    from("mailbox").to("my_queue");