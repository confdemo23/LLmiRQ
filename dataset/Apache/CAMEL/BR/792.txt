Exception is not logged or handled when error handler is LoggingErrorHandler and processing occurs inside Pipeline
Exception throw inside Pipeline is not reported or handled when error handler is LoggingErrorHandler.
Attached unit test fails - exchange with exception is not passed to "mock:error" endpoints.
Test will pass when you change error handler to default (DeadLetterErrorHandler)
or when processor throwing an exception is processed not inside Pipeline.
After some digging inside source code I noticed Pipeline source code fragment.

    public void process(Exchange exchange) throws Exception {
        AsyncProcessorHelper.process(this, exchange);
    }


AsyncProcessorHelper.process(..) never throws exception directly.
Instead it passes exception information in exchange object properties.
Problem is LoggingErrorHandler doesn&amp;apos;t use it correctly because (code snipped from LoggingErrorHandler):

    public void process(Exchange exchange) throws Exception {
        try {
            output.process(exchange);
        } catch (Throwable e) {
            if (!customProcessorForException(exchange, e)) {
                logError(exchange, e);
            }
        }
    }


it is logging only exception returned directly by output.process call.