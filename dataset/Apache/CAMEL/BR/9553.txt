Twitter consumer doesn&apos;t respect the delay parameter
I&amp;apos;ve configured a polling Twitter endpoint with nearly default Spring configuration as follows:



from("twitter://search?type=polling&amp;keywords=searchterms&amp;delay=60&amp;consumerKey=[s]&amp;consumerSecret=[s]&amp;accessToken=[s]&amp;accessTokenSecret=[s]")



However, it doesn&amp;apos;t seem to respect the delay parameter.
On debugging, the delay parameter is set properly:



    public TwitterConsumerPolling(TwitterEndpoint endpoint, Processor processor,

                                  Twitter4JConsumer twitter4jConsumer) {

        super(endpoint, processor);



        this.twitter4jConsumer = twitter4jConsumer;



        int delay = endpoint.getProperties().getDelay();

        setInitialDelay(1);

        setDelay(delay);  // delay is set properly to 60 here

        setTimeUnit(TimeUnit.SECONDS);

    }



but when the run() method of the ScheduledPollConsumer runs, the delay parameter is still the default of 500.



public void run() {

        // avoid this thread to throw exceptions because the thread pool wont re-schedule a new thread

        try {

            // log starting

            if (LoggingLevel.ERROR == runLoggingLevel) {

                LOG.error("Scheduled task started on:   {}", this.getEndpoint());

            } else if (LoggingLevel.WARN == runLoggingLevel) {

                LOG.warn("Scheduled task started on:   {}", this.getEndpoint());

            } else if (LoggingLevel.INFO == runLoggingLevel) {

                LOG.info("Scheduled task started on:   {}", this.getEndpoint());

            } else if (LoggingLevel.DEBUG == runLoggingLevel) {

                LOG.debug("Scheduled task started on:   {}", this.getEndpoint());

            } else {

                LOG.trace("Scheduled task started on:   {}", this.getEndpoint());

            }



            // execute scheduled task

            doRun();



            // log completed

            if (LoggingLevel.ERROR == runLoggingLevel) {

                LOG.error("Scheduled task completed on: {}", this.getEndpoint());

            } else if (LoggingLevel.WARN == runLoggingLevel) {

                LOG.warn("Scheduled task completed on: {}", this.getEndpoint());

            } else if (LoggingLevel.INFO == runLoggingLevel) {

                LOG.info("Scheduled task completed on: {}", this.getEndpoint());

            } else if (LoggingLevel.DEBUG == runLoggingLevel) {

                LOG.debug("Scheduled task completed on: {}", this.getEndpoint());

            } else {

                LOG.trace("Scheduled task completed on: {}", this.getEndpoint());

            }



        } catch (Error e) {

            // must catch Error, to ensure the task is re-scheduled

            LOG.error("Error occurred during running scheduled task on: " + this.getEndpoint() + ", due: " + e.getMessage(), e);

        }

    }


