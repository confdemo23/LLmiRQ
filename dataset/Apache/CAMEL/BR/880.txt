Headers lost when using scriptBuilder to set headers dynamically
When running a dynamic script evaluation in a setHeader, the header is lost as the Pipeline chain uses the data from the out body as the source of headers. 
So trying to figure this out, I looked into the source, and found that if the getOut is not null, the out message is used to set the header in the setHeader processor. Unfortunately in the script engine this block of code always ensures that it&amp;apos;s NOT null. 
script builder class line 520 of Camel 1.4 
        ScriptContext context = engine.getContext(); 
        int scope = ScriptContext.ENGINE_SCOPE; 
        context.setAttribute("context", exchange.getContext(), scope); 
        context.setAttribute("exchange", exchange, scope); 
        context.setAttribute("request", exchange.getIn(), scope); 
        context.setAttribute("response", exchange.getOut(), scope); 
The place were the out message is used is here in the Pipeline class at line 79 
            if (first) 
{ 
                first = false; 
            }
 else 
{ 
                nextExchange = createNextExchange(processor, nextExchange); 
            }
 
The specifics of my setup were:
Used spring with the following configuration:
	&lt;camel:camelContext&gt;
		&lt;camel:route&gt;
			&lt;camel:from uri="jms://LLAQueue?disableReplyTo=true" /&gt;
			&lt;camel:setHeader headerName="activity.type"&gt;
				&lt;camel:jxpath&gt;exchange.getIn().getBody().getExerciseHighLevelActivity().getActivityType()&lt;/camel:jxpath&gt;
			&lt;/camel:setHeader&gt;
			&lt;camel:choice&gt;
				&lt;camel:when&gt;
					&lt;camel:javaScript&gt;
						exchange.getIn().getHeader(&amp;apos;activity.type&amp;apos;) == 3
					&lt;/camel:javaScript&gt;
					&lt;camel:transform&gt;
						&lt;camel:javaScript&gt;
							exchange.getIn().getBody().getData() !=
							undefined ?
							exchange.getIn().getBody().getData() : ""
						&lt;/camel:javaScript&gt;
					&lt;/camel:transform&gt;
					&lt;camel:to uri="log:info?showAll=true" /&gt;
				&lt;/camel:when&gt;
			&lt;/camel:choice&gt;
		&lt;/camel:route&gt;
	&lt;/camel:camelContext&gt;
I did not test this problem with other exchange types, just the JMS type.