ByteBuffer to String conversion uses buffer capacity not limit
Camel&amp;apos;s conversion logic for ByteBuffer&amp;apos;s to String&amp;apos;s has a bug where camel uses a ByteBuffers capacity() instead of it&amp;apos;s limit().
If you allocate a large byte buffer and only partially fill it with data, and use camel to convert this into a string, camel tries to convert all the bytes, even the non-used ones.
This unit test reproduces this bug.



    @Test

    public void testByteBufferToStringConversion()

    {

        String str = "123456789";

        ByteBuffer buffer = ByteBuffer.allocate( 16 );

        buffer.put( str.getBytes() );



        Exchange exchange = new DefaultExchange( context() );

        exchange.getIn().setBody( buffer );

        assertEquals( str, exchange.getIn().getBody( String.class ) );

    }


