RouteBuilder.getRoutes does not return routes
Suspected reason:
Looking at the code reveals that the initalization of the routebuilder actually sets the routes in the injected CamelContext, but does not populate the local list of routes. 
Consequence:
One is not able to replace routes in the CamelContext by fetching routes from routebuilders, and then set the list of routes in the camel context.



List&lt;Routes&gt; routeList = new ArrayList();

//Some method fetching all my builders
List&lt;Routes&gt; routesList = getRouteBuilders();

//Build a list of all routes, thereby updating my camel context with fresh routes...
for(Routes routes:routesList){

    //Fetches an empty list, but the builder now sets the route in the context
    List&lt;Route&gt; routeListFromBuilder = routes.getRouteList();

    //I am now adding an empty list to my list of routes
    routeList.addAll( routeListFromBuilder );

}

//Sets an empty list into the context, thereby clearing all routes
camleContext.setRoutes( routeList );


Possible solution:
in RouteBuilder replace:

protected void populateRoutes(List&lt;Route&gt; routes) throws Exception {
        CamelContext camelContext = getContext();
        if (camelContext == null) {
            throw new IllegalArgumentException("No CamelContext has been injected!");
        }
        routeCollection.setCamelContext(camelContext);
        camelContext.addRouteDefinitions(routeCollection.getRoutes());
}


with


protected void populateRoutes(List&lt;Route&gt; routes) throws Exception {
        CamelContext camelContext = getContext();
        if (camelContext == null) {
            throw new IllegalArgumentException("No CamelContext has been injected!");
        }
        routeCollection.setCamelContext(camelContext);
        routes.addAll(routeCollection.getRoutes());
}

