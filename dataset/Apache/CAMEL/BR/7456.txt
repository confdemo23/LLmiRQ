Camel PropertiesComponent ignores custom parser in Blueprint
I have implemented a custom PropertiesParser which allows me to use system property placeholders in propertyPrefix and propertySuffix.
In my use case the propertyPrefix is defined as "${container.stage}.", where container.stage is a jvm option defined at container creation. The value is one of dev, test and prod.
This works fine in Java DSL world (SCR bundle), but custom parser is ignored in Blueprint. Here is sample of my blueprint xml:



 &lt;cm:property-placeholder id="integration" persistent-id="org.apache.camel.sample.temp" placeholder-prefix="[[" placeholder-suffix="]]"&gt;

    &lt;cm:default-properties&gt;

        &lt;cm:property name="example" value="this value is the default"/&gt;

        &lt;cm:property name="dev.example" value="this value is used in development environment"/&gt;

        &lt;cm:property name="test.example" value="this value is used in test environment"/&gt;

        &lt;cm:property name="prod.example" value="this value is used in production environment"/&gt;

    &lt;/cm:default-properties&gt;

&lt;/cm:property-placeholder&gt;



&lt;bean id="parser" class="org.apache.camel.sample.MyCustomPropertiesParser"/&gt;



&lt;!-- Load properties for current container stage --&gt;

&lt;bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent"&gt;

    &lt;property name="propertiesParser" ref="parser"/&gt;

    &lt;property name="propertyPrefix" value="${container.stage}."/&gt;

    &lt;property name="fallbackToUnaugmentedProperty" value="true"/&gt;

    &lt;property name="location" value="blueprint:integration,classpath:properties/temp.properties"/&gt;&lt;/bean&gt;



&lt;camelContext id="temp" xmlns="http://camel.apache.org/schema/blueprint"&gt;

    &lt;route id="exampleRoute"&gt;

        &lt;from uri="timer:foo?period=5000"/&gt;

        &lt;transform&gt;

            &lt;simple&gt;{{example}}&lt;/simple&gt;

        &lt;/transform&gt;

        &lt;to uri="log:something"/&gt;

    &lt;/route&gt;

&lt;/camelContext&gt;



The reason it did not work was because by default, it uses blueprint property resolver (useBlueprintPropertyResolver="true") to bridge PropertiesComponent to blueprint in order to support looking up property placeholders from the Blueprint Property Placeholder Service. Then it always creates a BlueprintPropertiesParser object and set it to PropertiesComponent. 
The customer Property Parser I created was only set into the BlueprintPropertiesParser object as a delegate Property Parser. Therefore, it was always the method parseUri() from the BlueprintPropertiesParser object got invoked. The same method from your custom parser was ignored. 
For more detail, please take a look at org.apache.camel.blueprint.CamelContextFactoryBean.initPropertyPlaceholder() function.
The only workaround is to add the attribute useBlueprintPropertyResolver="false" to &lt;camelContext&gt; element to disable default blueprint property resolver. However, I will have to change PropertiesComponent&amp;apos;s "location" property to remove blueprint "blueprint:integration" from the comma separated value list:



 &lt;property name="location" value="classpath:properties/temp.properties"/&gt; 



Because once I set it to false, I will no longer be able to lookup from blueprint property service.